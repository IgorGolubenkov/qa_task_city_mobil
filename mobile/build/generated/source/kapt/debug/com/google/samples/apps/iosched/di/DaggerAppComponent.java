// Generated by Dagger (https://dagger.dev).
package com.google.samples.apps.iosched.di;

import android.content.ClipboardManager;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.wifi.WifiManager;
import androidx.lifecycle.ViewModel;
import androidx.recyclerview.widget.RecyclerView;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.functions.FirebaseFunctions;
import com.google.firebase.remoteconfig.FirebaseRemoteConfig;
import com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;
import com.google.samples.apps.iosched.MainApplication;
import com.google.samples.apps.iosched.MainApplication_MembersInjector;
import com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper;
import com.google.samples.apps.iosched.shared.data.ConferenceDataRepository;
import com.google.samples.apps.iosched.shared.data.ConferenceDataSource;
import com.google.samples.apps.iosched.shared.data.agenda.AgendaRepository;
import com.google.samples.apps.iosched.shared.data.ar.ArDebugFlagEndpoint;
import com.google.samples.apps.iosched.shared.data.codelabs.CodelabsRepository;
import com.google.samples.apps.iosched.shared.data.codelabs.CodelabsRepository_Factory;
import com.google.samples.apps.iosched.shared.data.config.AppConfigDataSource;
import com.google.samples.apps.iosched.shared.data.db.AppDatabase;
import com.google.samples.apps.iosched.shared.data.feed.AnnouncementDataSource;
import com.google.samples.apps.iosched.shared.data.feed.FeedRepository;
import com.google.samples.apps.iosched.shared.data.feed.MomentDataSource;
import com.google.samples.apps.iosched.shared.data.feedback.FeedbackEndpoint;
import com.google.samples.apps.iosched.shared.data.job.ConferenceDataService;
import com.google.samples.apps.iosched.shared.data.job.ConferenceDataService_MembersInjector;
import com.google.samples.apps.iosched.shared.data.prefs.PreferenceStorage;
import com.google.samples.apps.iosched.shared.data.prefs.SharedPreferenceStorage;
import com.google.samples.apps.iosched.shared.data.prefs.SharedPreferenceStorage_Factory;
import com.google.samples.apps.iosched.shared.data.session.SessionRepository;
import com.google.samples.apps.iosched.shared.data.signin.datasources.AuthIdDataSource;
import com.google.samples.apps.iosched.shared.data.signin.datasources.AuthStateUserDataSource;
import com.google.samples.apps.iosched.shared.data.signin.datasources.RegisteredUserDataSource;
import com.google.samples.apps.iosched.shared.data.tag.TagRepository;
import com.google.samples.apps.iosched.shared.data.tag.TagRepository_Factory;
import com.google.samples.apps.iosched.shared.data.userevent.DefaultSessionAndUserEventRepository;
import com.google.samples.apps.iosched.shared.data.userevent.DefaultSessionAndUserEventRepository_Factory;
import com.google.samples.apps.iosched.shared.data.userevent.SessionAndUserEventRepository;
import com.google.samples.apps.iosched.shared.data.userevent.UserEventDataSource;
import com.google.samples.apps.iosched.shared.di.BroadcastReceiverBindingModule_AlarmBroadcastReceiver$shared_debug;
import com.google.samples.apps.iosched.shared.di.BroadcastReceiverBindingModule_CancelNotificationBroadcastReceiver$shared_debug;
import com.google.samples.apps.iosched.shared.di.FeatureFlagsModule;
import com.google.samples.apps.iosched.shared.di.FeatureFlagsModule_ProvideEnableExploreArFlagFactory;
import com.google.samples.apps.iosched.shared.di.FeatureFlagsModule_ProvideSearchUsingRoomEnabledFlagFactory;
import com.google.samples.apps.iosched.shared.di.IOSchedViewModelFactory;
import com.google.samples.apps.iosched.shared.di.ServiceBindingModule_IoschedMessagingService$shared_debug;
import com.google.samples.apps.iosched.shared.di.ServiceBindingModule_ProvideConferenceDataService$shared_debug;
import com.google.samples.apps.iosched.shared.di.SharedModule;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideAnnouncementDataSourceFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideAppConfigDataSourceFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideArDebugFlagEndpointFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideBootstrapRemoteSessionDataSourceFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideConferenceDataRepositoryFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideConferenceDataSourceFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideFeedRepositoryFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideFeedbackEndpointFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideFirebaseFireStoreFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideFirebaseFunctionsFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideFirebaseRemoteConfigFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideFirebaseRemoteConfigSettingsFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideMomentsDataSourceFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideSessionAndUserEventRepositoryFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideSessionRepositoryFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideTimeProviderFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideTopicSubscriberFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideUserEventDataSourceFactory;
import com.google.samples.apps.iosched.shared.domain.RefreshConferenceDataUseCase;
import com.google.samples.apps.iosched.shared.domain.RefreshConferenceDataUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.agenda.LoadAgendaUseCase;
import com.google.samples.apps.iosched.shared.domain.agenda.LoadAgendaUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.ar.LoadArDebugFlagUseCase;
import com.google.samples.apps.iosched.shared.domain.ar.LoadArDebugFlagUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.auth.ObserveUserAuthStateUseCase;
import com.google.samples.apps.iosched.shared.domain.auth.ObserveUserAuthStateUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.codelabs.GetCodelabsInfoCardShownUseCase;
import com.google.samples.apps.iosched.shared.domain.codelabs.GetCodelabsInfoCardShownUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.codelabs.LoadCodelabsUseCase;
import com.google.samples.apps.iosched.shared.domain.codelabs.LoadCodelabsUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.codelabs.SetCodelabsInfoCardShownUseCase;
import com.google.samples.apps.iosched.shared.domain.codelabs.SetCodelabsInfoCardShownUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.feed.LoadAnnouncementsUseCase;
import com.google.samples.apps.iosched.shared.domain.feed.LoadAnnouncementsUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.feed.LoadCurrentMomentUseCase;
import com.google.samples.apps.iosched.shared.domain.feed.LoadCurrentMomentUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.internal.IOSchedHandler;
import com.google.samples.apps.iosched.shared.domain.logistics.LoadWifiInfoUseCase;
import com.google.samples.apps.iosched.shared.domain.logistics.LoadWifiInfoUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.LoadSelectedFiltersUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.LoadSelectedFiltersUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.MarkScheduleUiHintsShownUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.MyLocationOptedInUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.MyLocationOptedInUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.NotificationsPrefIsShownUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.NotificationsPrefIsShownUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.NotificationsPrefSaveActionUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.NotificationsPrefSaveActionUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.NotificationsPrefShownActionUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.OnboardingCompleteActionUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.OnboardingCompleteActionUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.OnboardingCompletedUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.OnboardingCompletedUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.OptIntoMyLocationUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.OptIntoMyLocationUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.SaveSelectedFiltersUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.SaveSelectedFiltersUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.ScheduleUiHintsShownUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.ScheduleUiHintsShownUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.prefs.StopSnackbarActionUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.StopSnackbarActionUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.search.SearchDbUseCase;
import com.google.samples.apps.iosched.shared.domain.search.SearchDbUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.search.SearchUseCase;
import com.google.samples.apps.iosched.shared.domain.search.SearchUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadFilteredUserSessionsUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadFilteredUserSessionsUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadPinnedSessionsJsonUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadPinnedSessionsJsonUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadSessionSyncUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadUserSessionSyncUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadUserSessionUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadUserSessionUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadUserSessionsUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadUserSessionsUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.NotificationAlarmUpdater;
import com.google.samples.apps.iosched.shared.domain.sessions.NotificationAlarmUpdater_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.ObserveConferenceDataUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.ObserveConferenceDataUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.StarReserveNotificationAlarmUpdater;
import com.google.samples.apps.iosched.shared.domain.sessions.StarReserveNotificationAlarmUpdater_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.GetAnalyticsSettingUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.GetAnalyticsSettingUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.GetAvailableThemesUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.GetNotificationsSettingUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.GetNotificationsSettingUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.GetThemeUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.GetThemeUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.GetTimeZoneUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.GetTimeZoneUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.ObserveThemeModeUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.ObserveThemeModeUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.SetAnalyticsSettingUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.SetAnalyticsSettingUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.SetThemeUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.SetThemeUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.settings.SetTimeZoneUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.SetTimeZoneUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.speakers.LoadSpeakerUseCase;
import com.google.samples.apps.iosched.shared.domain.speakers.LoadSpeakerUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.users.FeedbackUseCase;
import com.google.samples.apps.iosched.shared.domain.users.FeedbackUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.users.ReservationActionUseCase;
import com.google.samples.apps.iosched.shared.domain.users.ReservationActionUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.users.StarEventAndNotifyUseCase;
import com.google.samples.apps.iosched.shared.domain.users.StarEventAndNotifyUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.users.SwapActionUseCase;
import com.google.samples.apps.iosched.shared.fcm.IoschedFirebaseMessagingService;
import com.google.samples.apps.iosched.shared.fcm.TopicSubscriber;
import com.google.samples.apps.iosched.shared.notifications.AlarmBroadcastReceiver;
import com.google.samples.apps.iosched.shared.notifications.AlarmBroadcastReceiver_MembersInjector;
import com.google.samples.apps.iosched.shared.notifications.CancelNotificationBroadcastReceiver;
import com.google.samples.apps.iosched.shared.notifications.CancelNotificationBroadcastReceiver_MembersInjector;
import com.google.samples.apps.iosched.shared.notifications.SessionAlarmManager;
import com.google.samples.apps.iosched.shared.notifications.SessionAlarmManager_Factory;
import com.google.samples.apps.iosched.shared.time.TimeProvider;
import com.google.samples.apps.iosched.shared.util.NetworkUtils;
import com.google.samples.apps.iosched.shared.util.NetworkUtils_Factory;
import com.google.samples.apps.iosched.ui.LaunchViewModel;
import com.google.samples.apps.iosched.ui.LaunchViewModel_Factory;
import com.google.samples.apps.iosched.ui.LauncherActivity;
import com.google.samples.apps.iosched.ui.LauncherActivity_MembersInjector;
import com.google.samples.apps.iosched.ui.MainActivity;
import com.google.samples.apps.iosched.ui.MainActivityViewModel;
import com.google.samples.apps.iosched.ui.MainActivityViewModel_Factory;
import com.google.samples.apps.iosched.ui.MainActivity_MembersInjector;
import com.google.samples.apps.iosched.ui.agenda.AgendaFragment;
import com.google.samples.apps.iosched.ui.agenda.AgendaFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.agenda.AgendaModule_ContributeScheduleAgendaFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.agenda.AgendaViewModel;
import com.google.samples.apps.iosched.ui.agenda.AgendaViewModel_Factory;
import com.google.samples.apps.iosched.ui.codelabs.CodelabsFragment;
import com.google.samples.apps.iosched.ui.codelabs.CodelabsFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.codelabs.CodelabsModule_ContributeCodelabsFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.codelabs.CodelabsViewModel;
import com.google.samples.apps.iosched.ui.codelabs.CodelabsViewModel_Factory;
import com.google.samples.apps.iosched.ui.feed.FeedFragment;
import com.google.samples.apps.iosched.ui.feed.FeedFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.feed.FeedModule_ContributeFeedFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.feed.FeedViewModel;
import com.google.samples.apps.iosched.ui.feed.FeedViewModel_Factory;
import com.google.samples.apps.iosched.ui.info.EventFragment;
import com.google.samples.apps.iosched.ui.info.EventFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.info.EventInfoViewModel;
import com.google.samples.apps.iosched.ui.info.EventInfoViewModel_Factory;
import com.google.samples.apps.iosched.ui.info.FaqFragment;
import com.google.samples.apps.iosched.ui.info.InfoFragment;
import com.google.samples.apps.iosched.ui.info.InfoFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.info.InfoFragmentsModule_ContributeEventFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.InfoFragmentsModule_ContributeFaqFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.InfoFragmentsModule_ContributeTravelFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.InfoModule_ContributeInfoFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.TravelFragment;
import com.google.samples.apps.iosched.ui.map.LoadGeoJsonFeaturesUseCase;
import com.google.samples.apps.iosched.ui.map.LoadGeoJsonFeaturesUseCase_Factory;
import com.google.samples.apps.iosched.ui.map.MapFragment;
import com.google.samples.apps.iosched.ui.map.MapFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.map.MapModule_ContributeMapFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.map.MapModule_ContributeMapVariantSelectionFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.map.MapVariantSelectionDialogFragment;
import com.google.samples.apps.iosched.ui.map.MapVariantSelectionDialogFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.map.MapViewModel;
import com.google.samples.apps.iosched.ui.map.MapViewModel_Factory;
import com.google.samples.apps.iosched.ui.messages.SnackbarMessageManager;
import com.google.samples.apps.iosched.ui.messages.SnackbarMessageManager_Factory;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingActivity;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingActivity_MembersInjector;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingFragment;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingModule_ContributeOnboardingFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingModule_ContributeOnboardingSignInFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingModule_ContributeWelcomeDuringConferenceFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingModule_ContributeWelcomePreConferenceFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingSignInFragment;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingSignInFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingViewModel;
import com.google.samples.apps.iosched.ui.onboarding.OnboardingViewModel_Factory;
import com.google.samples.apps.iosched.ui.onboarding.WelcomeDuringConferenceFragment;
import com.google.samples.apps.iosched.ui.onboarding.WelcomeDuringConferenceFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.onboarding.WelcomePreConferenceFragment;
import com.google.samples.apps.iosched.ui.onboarding.WelcomePreConferenceFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.prefs.SnackbarPreferenceViewModel;
import com.google.samples.apps.iosched.ui.prefs.SnackbarPreferenceViewModel_Factory;
import com.google.samples.apps.iosched.ui.reservation.RemoveReservationDialogFragment;
import com.google.samples.apps.iosched.ui.reservation.RemoveReservationDialogFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.reservation.RemoveReservationViewModel;
import com.google.samples.apps.iosched.ui.reservation.RemoveReservationViewModel_Factory;
import com.google.samples.apps.iosched.ui.reservation.ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.reservation.ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.reservation.SwapReservationDialogFragment;
import com.google.samples.apps.iosched.ui.reservation.SwapReservationDialogFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.schedule.ScheduleFragment;
import com.google.samples.apps.iosched.ui.schedule.ScheduleFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.schedule.ScheduleModule_ContributeScheduleFilterFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.schedule.ScheduleModule_ContributeScheduleFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.schedule.ScheduleModule_ContributeScheduleUiHintsDialogFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.schedule.ScheduleUiHintsDialogFragment;
import com.google.samples.apps.iosched.ui.schedule.ScheduleUiHintsDialogFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.schedule.ScheduleViewModel;
import com.google.samples.apps.iosched.ui.schedule.ScheduleViewModel_Factory;
import com.google.samples.apps.iosched.ui.schedule.filters.LoadEventFiltersUseCase;
import com.google.samples.apps.iosched.ui.schedule.filters.LoadEventFiltersUseCase_Factory;
import com.google.samples.apps.iosched.ui.schedule.filters.ScheduleFilterFragment;
import com.google.samples.apps.iosched.ui.schedule.filters.ScheduleFilterFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.search.SearchFragment;
import com.google.samples.apps.iosched.ui.search.SearchFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.search.SearchModule_ContributeSearchFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.search.SearchViewModel;
import com.google.samples.apps.iosched.ui.search.SearchViewModel_Factory;
import com.google.samples.apps.iosched.ui.sessioncommon.EventActionsViewModelDelegate;
import com.google.samples.apps.iosched.ui.sessioncommon.EventActionsViewModelDelegateModule;
import com.google.samples.apps.iosched.ui.sessioncommon.EventActionsViewModelDelegateModule_ProvideEventActionsViewModelDelegateFactory;
import com.google.samples.apps.iosched.ui.sessioncommon.SessionViewPoolModule;
import com.google.samples.apps.iosched.ui.sessioncommon.SessionViewPoolModule_ProvidesTagViewPoolFactory;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailActivity;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailActivity_MembersInjector;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailFragment;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailModule_ContributeSessionDetailFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailViewModel;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailViewModel_Factory;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionFeedbackFragment;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionFeedbackFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionFeedbackViewModel;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionFeedbackViewModel_Factory;
import com.google.samples.apps.iosched.ui.settings.SettingsFragment;
import com.google.samples.apps.iosched.ui.settings.SettingsFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.settings.SettingsModule_ContributeSettingsFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.settings.SettingsModule_ContributeThemeSettingFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.settings.SettingsViewModel;
import com.google.samples.apps.iosched.ui.settings.SettingsViewModel_Factory;
import com.google.samples.apps.iosched.ui.settings.ThemeSettingDialogFragment;
import com.google.samples.apps.iosched.ui.settings.ThemeSettingDialogFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.signin.NotificationsPreferenceDialogFragment;
import com.google.samples.apps.iosched.ui.signin.NotificationsPreferenceDialogFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.signin.SignInDialogFragment;
import com.google.samples.apps.iosched.ui.signin.SignInDialogFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.signin.SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.signin.SignInDialogModule_ContributeSignInDialogFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.signin.SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.signin.SignInViewModel;
import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate;
import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegateModule;
import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegateModule_ProvideSignInViewModelDelegateFactory;
import com.google.samples.apps.iosched.ui.signin.SignInViewModel_Factory;
import com.google.samples.apps.iosched.ui.signin.SignOutDialogFragment;
import com.google.samples.apps.iosched.ui.signin.SignOutDialogFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.speaker.SpeakerFragment;
import com.google.samples.apps.iosched.ui.speaker.SpeakerFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.speaker.SpeakerModule_ContributeSpeakerFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.speaker.SpeakerViewModel;
import com.google.samples.apps.iosched.ui.speaker.SpeakerViewModel_Factory;
import com.google.samples.apps.iosched.ui.theme.ThemeViewModel;
import com.google.samples.apps.iosched.ui.theme.ThemeViewModel_Factory;
import com.google.samples.apps.iosched.ui.theme.ThemedActivityDelegate;
import com.google.samples.apps.iosched.ui.theme.ThemedActivityDelegateImpl;
import com.google.samples.apps.iosched.ui.theme.ThemedActivityDelegateImpl_Factory;
import com.google.samples.apps.iosched.util.ConferenceStateLiveData;
import com.google.samples.apps.iosched.util.ConferenceStateLiveData_Factory;
import com.google.samples.apps.iosched.util.wifi.WifiInstaller;
import com.google.samples.apps.iosched.util.wifi.WifiInstaller_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerAppCompatDialogFragment_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final SignInModule signInModule;

  private final MainApplication application;

  private final AppModule appModule;

  private final FeatureFlagsModule featureFlagsModule;

  private Provider<ActivityBindingModule_LauncherActivity$mobile_debug.LauncherActivitySubcomponent.Factory> launcherActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_OnboardingActivity$mobile_debug.OnboardingActivitySubcomponent.Factory> onboardingActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_MainActivity$mobile_debug.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent.Factory> sessionDetailActivitySubcomponentFactoryProvider;

  private Provider<BroadcastReceiverBindingModule_AlarmBroadcastReceiver$shared_debug.AlarmBroadcastReceiverSubcomponent.Factory> alarmBroadcastReceiverSubcomponentFactoryProvider;

  private Provider<BroadcastReceiverBindingModule_CancelNotificationBroadcastReceiver$shared_debug.CancelNotificationBroadcastReceiverSubcomponent.Factory> cancelNotificationBroadcastReceiverSubcomponentFactoryProvider;

  private Provider<ServiceBindingModule_IoschedMessagingService$shared_debug.IoschedFirebaseMessagingServiceSubcomponent.Factory> ioschedFirebaseMessagingServiceSubcomponentFactoryProvider;

  private Provider<ServiceBindingModule_ProvideConferenceDataService$shared_debug.ConferenceDataServiceSubcomponent.Factory> conferenceDataServiceSubcomponentFactoryProvider;

  private Provider<MainApplication> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<FirebaseFirestore> provideFirebaseFireStoreProvider;

  private Provider<RegisteredUserDataSource> provideRegisteredUserDataSourceProvider;

  private Provider<FirebaseAuth> provideFirebaseAuthProvider;

  private Provider<SessionAlarmManager> sessionAlarmManagerProvider;

  private Provider<UserEventDataSource> provideUserEventDataSourceProvider;

  private Provider<NetworkUtils> networkUtilsProvider;

  private Provider<ConferenceDataSource> provideConferenceDataSourceProvider;

  private Provider<ConferenceDataSource> provideBootstrapRemoteSessionDataSourceProvider;

  private Provider<AppDatabase> providesAppDatabaseProvider;

  private Provider<ConferenceDataRepository> provideConferenceDataRepositoryProvider;

  private Provider<SessionRepository> provideSessionRepositoryProvider;

  private Provider<SessionAndUserEventRepository> provideSessionAndUserEventRepositoryProvider;

  private Provider<NotificationAlarmUpdater> notificationAlarmUpdaterProvider;

  private Provider<AuthStateUserDataSource> provideAuthStateUserDataSourceProvider;

  private Provider<TopicSubscriber> provideTopicSubscriberProvider;

  private Provider<ObserveUserAuthStateUseCase> observeUserAuthStateUseCaseProvider;

  private Provider<PreferenceStorage> providesPreferenceStorageProvider;

  private Provider<NotificationsPrefIsShownUseCase> notificationsPrefIsShownUseCaseProvider;

  private Provider<SignInViewModelDelegate> provideSignInViewModelDelegateProvider;

  private Provider<AnalyticsHelper> providesAnalyticsHelperProvider;

  private Provider<ObserveThemeModeUseCase> observeThemeModeUseCaseProvider;

  private Provider<GetThemeUseCase> getThemeUseCaseProvider;

  private Provider<ThemedActivityDelegateImpl> themedActivityDelegateImplProvider;

  private Provider<ThemedActivityDelegate> provideThemedActivityDelegateProvider;

  private Provider<ThemeViewModel> themeViewModelProvider;

  private Provider<SnackbarMessageManager> snackbarMessageManagerProvider;

  private Provider<DefaultSessionAndUserEventRepository> defaultSessionAndUserEventRepositoryProvider;

  private Provider<FirebaseFunctions> provideFirebaseFunctionsProvider;

  private Provider<ArDebugFlagEndpoint> provideArDebugFlagEndpointProvider;

  private Provider<FirebaseRemoteConfigSettings> provideFirebaseRemoteConfigSettingsProvider;

  private Provider<FirebaseRemoteConfig> provideFirebaseRemoteConfigProvider;

  private Provider<AppConfigDataSource> provideAppConfigDataSourceProvider;

  private Provider<AgendaRepository> provideAgendaRepositoryProvider;

  private Provider<CodelabsRepository> codelabsRepositoryProvider;

  private Provider<AnnouncementDataSource> provideAnnouncementDataSourceProvider;

  private Provider<MomentDataSource> provideMomentsDataSourceProvider;

  private Provider<FeedRepository> provideFeedRepositoryProvider;

  private Provider<IOSchedHandler> providesMainThreadHandlerProvider;

  private Provider<TimeProvider> provideTimeProvider;

  private Provider<LoadWifiInfoUseCase> loadWifiInfoUseCaseProvider;

  private Provider<WifiManager> providesWifiManagerProvider;

  private Provider<ClipboardManager> providesClipboardManagerProvider;

  private Provider<TagRepository> tagRepositoryProvider;

  private Provider<StarReserveNotificationAlarmUpdater> starReserveNotificationAlarmUpdaterProvider;

  private Provider<Boolean> provideSearchUsingRoomEnabledFlagProvider;

  private Provider<FeedbackEndpoint> provideFeedbackEndpointProvider;

  private Provider<Boolean> provideEnableExploreArFlagProvider;

  private Provider<SharedPreferenceStorage> sharedPreferenceStorageProvider;

  private Provider<AuthIdDataSource> providesAuthIdDataSourceProvider;

  private DaggerAppComponent(AppModule appModuleParam, SharedModule sharedModuleParam,
      FeatureFlagsModule featureFlagsModuleParam, SignInModule signInModuleParam,
      SignInViewModelDelegateModule signInViewModelDelegateModuleParam,
      MainApplication applicationParam) {
    this.signInModule = signInModuleParam;
    this.application = applicationParam;
    this.appModule = appModuleParam;
    this.featureFlagsModule = featureFlagsModuleParam;
    initialize(appModuleParam, sharedModuleParam, featureFlagsModuleParam, signInModuleParam, signInViewModelDelegateModuleParam, applicationParam);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(8).put(LauncherActivity.class, (Provider) launcherActivitySubcomponentFactoryProvider).put(OnboardingActivity.class, (Provider) onboardingActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(SessionDetailActivity.class, (Provider) sessionDetailActivitySubcomponentFactoryProvider).put(AlarmBroadcastReceiver.class, (Provider) alarmBroadcastReceiverSubcomponentFactoryProvider).put(CancelNotificationBroadcastReceiver.class, (Provider) cancelNotificationBroadcastReceiverSubcomponentFactoryProvider).put(IoschedFirebaseMessagingService.class, (Provider) ioschedFirebaseMessagingServiceSubcomponentFactoryProvider).put(ConferenceDataService.class, (Provider) conferenceDataServiceSubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

  private Context getContext() {
    return AppModule_ProvideContextFactory.provideContext(appModule, application);}

  private ConnectivityManager getConnectivityManager() {
    return AppModule_ProvidesConnectivityManagerFactory.providesConnectivityManager(appModule, getContext());}

  private boolean getMapFeatureEnabledFlagBoolean() {
    return featureFlagsModule.provideMapFeatureEnabledFlag(provideAppConfigDataSourceProvider.get());}

  private boolean getCodelabsEnabledFlagBoolean() {
    return featureFlagsModule.provideCodelabsEnabledFlag(provideAppConfigDataSourceProvider.get());}

  private boolean getAssistantAppEnabledFlagBoolean() {
    return featureFlagsModule.provideAssistantAppEnabledFlag(provideAppConfigDataSourceProvider.get());}

  private boolean getSearchScheduleEnabledFlagBoolean() {
    return featureFlagsModule.provideSearchScheduleEnabledFlag(provideAppConfigDataSourceProvider.get());}

  private SessionAlarmManager getSessionAlarmManager() {
    return new SessionAlarmManager(getContext());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final SharedModule sharedModuleParam,
      final FeatureFlagsModule featureFlagsModuleParam, final SignInModule signInModuleParam,
      final SignInViewModelDelegateModule signInViewModelDelegateModuleParam,
      final MainApplication applicationParam) {
    this.launcherActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_LauncherActivity$mobile_debug.LauncherActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_LauncherActivity$mobile_debug.LauncherActivitySubcomponent.Factory get(
          ) {
        return new LauncherActivitySubcomponentFactory();}
    };
    this.onboardingActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_OnboardingActivity$mobile_debug.OnboardingActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_OnboardingActivity$mobile_debug.OnboardingActivitySubcomponent.Factory get(
          ) {
        return new OnboardingActivitySubcomponentFactory();}
    };
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_MainActivity$mobile_debug.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_MainActivity$mobile_debug.MainActivitySubcomponent.Factory get(
          ) {
        return new MainActivitySubcomponentFactory();}
    };
    this.sessionDetailActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent.Factory get(
          ) {
        return new SessionDetailActivitySubcomponentFactory();}
    };
    this.alarmBroadcastReceiverSubcomponentFactoryProvider = new Provider<BroadcastReceiverBindingModule_AlarmBroadcastReceiver$shared_debug.AlarmBroadcastReceiverSubcomponent.Factory>() {
      @Override
      public BroadcastReceiverBindingModule_AlarmBroadcastReceiver$shared_debug.AlarmBroadcastReceiverSubcomponent.Factory get(
          ) {
        return new AlarmBroadcastReceiverSubcomponentFactory();}
    };
    this.cancelNotificationBroadcastReceiverSubcomponentFactoryProvider = new Provider<BroadcastReceiverBindingModule_CancelNotificationBroadcastReceiver$shared_debug.CancelNotificationBroadcastReceiverSubcomponent.Factory>() {
      @Override
      public BroadcastReceiverBindingModule_CancelNotificationBroadcastReceiver$shared_debug.CancelNotificationBroadcastReceiverSubcomponent.Factory get(
          ) {
        return new CancelNotificationBroadcastReceiverSubcomponentFactory();}
    };
    this.ioschedFirebaseMessagingServiceSubcomponentFactoryProvider = new Provider<ServiceBindingModule_IoschedMessagingService$shared_debug.IoschedFirebaseMessagingServiceSubcomponent.Factory>() {
      @Override
      public ServiceBindingModule_IoschedMessagingService$shared_debug.IoschedFirebaseMessagingServiceSubcomponent.Factory get(
          ) {
        return new IoschedFirebaseMessagingServiceSubcomponentFactory();}
    };
    this.conferenceDataServiceSubcomponentFactoryProvider = new Provider<ServiceBindingModule_ProvideConferenceDataService$shared_debug.ConferenceDataServiceSubcomponent.Factory>() {
      @Override
      public ServiceBindingModule_ProvideConferenceDataService$shared_debug.ConferenceDataServiceSubcomponent.Factory get(
          ) {
        return new ConferenceDataServiceSubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider);
    this.provideFirebaseFireStoreProvider = DoubleCheck.provider(SharedModule_ProvideFirebaseFireStoreFactory.create(sharedModuleParam));
    this.provideRegisteredUserDataSourceProvider = DoubleCheck.provider(SignInModule_ProvideRegisteredUserDataSourceFactory.create(signInModuleParam, provideFirebaseFireStoreProvider));
    this.provideFirebaseAuthProvider = DoubleCheck.provider(SignInModule_ProvideFirebaseAuthFactory.create(signInModuleParam));
    this.sessionAlarmManagerProvider = SessionAlarmManager_Factory.create(provideContextProvider);
    this.provideUserEventDataSourceProvider = DoubleCheck.provider(SharedModule_ProvideUserEventDataSourceFactory.create(sharedModuleParam, provideFirebaseFireStoreProvider));
    this.networkUtilsProvider = NetworkUtils_Factory.create(provideContextProvider);
    this.provideConferenceDataSourceProvider = DoubleCheck.provider(SharedModule_ProvideConferenceDataSourceFactory.create(sharedModuleParam, provideContextProvider, networkUtilsProvider));
    this.provideBootstrapRemoteSessionDataSourceProvider = DoubleCheck.provider(SharedModule_ProvideBootstrapRemoteSessionDataSourceFactory.create(sharedModuleParam));
    this.providesAppDatabaseProvider = DoubleCheck.provider(AppModule_ProvidesAppDatabaseFactory.create(appModuleParam, provideContextProvider));
    this.provideConferenceDataRepositoryProvider = DoubleCheck.provider(SharedModule_ProvideConferenceDataRepositoryFactory.create(sharedModuleParam, provideConferenceDataSourceProvider, provideBootstrapRemoteSessionDataSourceProvider, providesAppDatabaseProvider));
    this.provideSessionRepositoryProvider = DoubleCheck.provider(SharedModule_ProvideSessionRepositoryFactory.create(sharedModuleParam, provideConferenceDataRepositoryProvider));
    this.provideSessionAndUserEventRepositoryProvider = DoubleCheck.provider(SharedModule_ProvideSessionAndUserEventRepositoryFactory.create(sharedModuleParam, provideUserEventDataSourceProvider, provideSessionRepositoryProvider));
    this.notificationAlarmUpdaterProvider = DoubleCheck.provider(NotificationAlarmUpdater_Factory.create(sessionAlarmManagerProvider, provideSessionAndUserEventRepositoryProvider));
    this.provideAuthStateUserDataSourceProvider = DoubleCheck.provider(SignInModule_ProvideAuthStateUserDataSourceFactory.create(signInModuleParam, provideFirebaseAuthProvider, provideFirebaseFireStoreProvider, notificationAlarmUpdaterProvider));
    this.provideTopicSubscriberProvider = DoubleCheck.provider(SharedModule_ProvideTopicSubscriberFactory.create(sharedModuleParam));
    this.observeUserAuthStateUseCaseProvider = DoubleCheck.provider(ObserveUserAuthStateUseCase_Factory.create(provideRegisteredUserDataSourceProvider, provideAuthStateUserDataSourceProvider, provideTopicSubscriberProvider));
    this.providesPreferenceStorageProvider = DoubleCheck.provider(AppModule_ProvidesPreferenceStorageFactory.create(appModuleParam, provideContextProvider));
    this.notificationsPrefIsShownUseCaseProvider = NotificationsPrefIsShownUseCase_Factory.create(providesPreferenceStorageProvider);
    this.provideSignInViewModelDelegateProvider = DoubleCheck.provider(SignInViewModelDelegateModule_ProvideSignInViewModelDelegateFactory.create(signInViewModelDelegateModuleParam, observeUserAuthStateUseCaseProvider, notificationsPrefIsShownUseCaseProvider));
    this.providesAnalyticsHelperProvider = DoubleCheck.provider(AppModule_ProvidesAnalyticsHelperFactory.create(appModuleParam, provideContextProvider, provideSignInViewModelDelegateProvider, providesPreferenceStorageProvider));
    this.observeThemeModeUseCaseProvider = ObserveThemeModeUseCase_Factory.create(providesPreferenceStorageProvider);
    this.getThemeUseCaseProvider = GetThemeUseCase_Factory.create(providesPreferenceStorageProvider);
    this.themedActivityDelegateImplProvider = ThemedActivityDelegateImpl_Factory.create(observeThemeModeUseCaseProvider, getThemeUseCaseProvider);
    this.provideThemedActivityDelegateProvider = DoubleCheck.provider((Provider) themedActivityDelegateImplProvider);
    this.themeViewModelProvider = ThemeViewModel_Factory.create(provideThemedActivityDelegateProvider);
    this.snackbarMessageManagerProvider = DoubleCheck.provider(SnackbarMessageManager_Factory.create(providesPreferenceStorageProvider));
    this.defaultSessionAndUserEventRepositoryProvider = DoubleCheck.provider(DefaultSessionAndUserEventRepository_Factory.create(provideUserEventDataSourceProvider, provideSessionRepositoryProvider));
    this.provideFirebaseFunctionsProvider = DoubleCheck.provider(SharedModule_ProvideFirebaseFunctionsFactory.create(sharedModuleParam));
    this.provideArDebugFlagEndpointProvider = DoubleCheck.provider(SharedModule_ProvideArDebugFlagEndpointFactory.create(sharedModuleParam, provideFirebaseFunctionsProvider));
    this.provideFirebaseRemoteConfigSettingsProvider = DoubleCheck.provider(SharedModule_ProvideFirebaseRemoteConfigSettingsFactory.create(sharedModuleParam));
    this.provideFirebaseRemoteConfigProvider = DoubleCheck.provider(SharedModule_ProvideFirebaseRemoteConfigFactory.create(sharedModuleParam, provideFirebaseRemoteConfigSettingsProvider));
    this.provideAppConfigDataSourceProvider = DoubleCheck.provider(SharedModule_ProvideAppConfigDataSourceFactory.create(sharedModuleParam, provideFirebaseRemoteConfigProvider, provideFirebaseRemoteConfigSettingsProvider));
    this.provideAgendaRepositoryProvider = DoubleCheck.provider(AppModule_ProvideAgendaRepositoryFactory.create(appModuleParam, provideAppConfigDataSourceProvider));
    this.codelabsRepositoryProvider = DoubleCheck.provider(CodelabsRepository_Factory.create(provideConferenceDataRepositoryProvider));
    this.provideAnnouncementDataSourceProvider = DoubleCheck.provider(SharedModule_ProvideAnnouncementDataSourceFactory.create(sharedModuleParam, provideFirebaseFireStoreProvider));
    this.provideMomentsDataSourceProvider = DoubleCheck.provider(SharedModule_ProvideMomentsDataSourceFactory.create(sharedModuleParam, provideFirebaseFireStoreProvider));
    this.provideFeedRepositoryProvider = DoubleCheck.provider(SharedModule_ProvideFeedRepositoryFactory.create(sharedModuleParam, provideAnnouncementDataSourceProvider, provideMomentsDataSourceProvider));
    this.providesMainThreadHandlerProvider = DoubleCheck.provider(AppModule_ProvidesMainThreadHandlerFactory.create(appModuleParam));
    this.provideTimeProvider = DoubleCheck.provider(SharedModule_ProvideTimeProviderFactory.create(sharedModuleParam));
    this.loadWifiInfoUseCaseProvider = DoubleCheck.provider(LoadWifiInfoUseCase_Factory.create(provideAppConfigDataSourceProvider));
    this.providesWifiManagerProvider = AppModule_ProvidesWifiManagerFactory.create(appModuleParam, provideContextProvider);
    this.providesClipboardManagerProvider = AppModule_ProvidesClipboardManagerFactory.create(appModuleParam, provideContextProvider);
    this.tagRepositoryProvider = DoubleCheck.provider(TagRepository_Factory.create(provideConferenceDataRepositoryProvider));
    this.starReserveNotificationAlarmUpdaterProvider = DoubleCheck.provider(StarReserveNotificationAlarmUpdater_Factory.create(sessionAlarmManagerProvider));
    this.provideSearchUsingRoomEnabledFlagProvider = FeatureFlagsModule_ProvideSearchUsingRoomEnabledFlagFactory.create(featureFlagsModuleParam, provideAppConfigDataSourceProvider);
    this.provideFeedbackEndpointProvider = DoubleCheck.provider(SharedModule_ProvideFeedbackEndpointFactory.create(sharedModuleParam, provideFirebaseFunctionsProvider));
    this.provideEnableExploreArFlagProvider = DoubleCheck.provider(FeatureFlagsModule_ProvideEnableExploreArFlagFactory.create(featureFlagsModuleParam, provideAppConfigDataSourceProvider));
    this.sharedPreferenceStorageProvider = DoubleCheck.provider(SharedPreferenceStorage_Factory.create(provideContextProvider));
    this.providesAuthIdDataSourceProvider = DoubleCheck.provider(SignInModule_ProvidesAuthIdDataSourceFactory.create(signInModuleParam, provideFirebaseAuthProvider));
  }

  @Override
  public void inject(MainApplication arg0) {
    injectMainApplication(arg0);}

  @CanIgnoreReturnValue
  private MainApplication injectMainApplication(MainApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    MainApplication_MembersInjector.injectAnalyticsHelper(instance, providesAnalyticsHelperProvider.get());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(MainApplication application) {
      Preconditions.checkNotNull(application);
      return new DaggerAppComponent(new AppModule(), new SharedModule(), new FeatureFlagsModule(), new SignInModule(), new SignInViewModelDelegateModule(), application);
    }
  }

  private final class LauncherActivitySubcomponentFactory implements ActivityBindingModule_LauncherActivity$mobile_debug.LauncherActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_LauncherActivity$mobile_debug.LauncherActivitySubcomponent create(
        LauncherActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LauncherActivitySubcomponentImpl(arg0);
    }
  }

  private final class LauncherActivitySubcomponentImpl implements ActivityBindingModule_LauncherActivity$mobile_debug.LauncherActivitySubcomponent {
    private Provider<OnboardingCompletedUseCase> onboardingCompletedUseCaseProvider;

    private Provider<LaunchViewModel> launchViewModelProvider;

    private LauncherActivitySubcomponentImpl(LauncherActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return ImmutableMap.<Class<? extends ViewModel>, Provider<ViewModel>>of(ThemeViewModel.class, (Provider) DaggerAppComponent.this.themeViewModelProvider, LaunchViewModel.class, (Provider) launchViewModelProvider);}

    private IOSchedViewModelFactory getIOSchedViewModelFactory() {
      return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final LauncherActivity arg0) {
      this.onboardingCompletedUseCaseProvider = OnboardingCompletedUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.launchViewModelProvider = LaunchViewModel_Factory.create(onboardingCompletedUseCaseProvider);
    }

    @Override
    public void inject(LauncherActivity arg0) {
      injectLauncherActivity(arg0);}

    @CanIgnoreReturnValue
    private LauncherActivity injectLauncherActivity(LauncherActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      LauncherActivity_MembersInjector.injectViewModelFactory(instance, getIOSchedViewModelFactory());
      return instance;
    }
  }

  private final class OnboardingActivitySubcomponentFactory implements ActivityBindingModule_OnboardingActivity$mobile_debug.OnboardingActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_OnboardingActivity$mobile_debug.OnboardingActivitySubcomponent create(
        OnboardingActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new OnboardingActivitySubcomponentImpl(arg0);
    }
  }

  private final class OnboardingActivitySubcomponentImpl implements ActivityBindingModule_OnboardingActivity$mobile_debug.OnboardingActivitySubcomponent {
    private Provider<OnboardingModule_ContributeOnboardingFragment$mobile_debug.OnboardingFragmentSubcomponent.Factory> onboardingFragmentSubcomponentFactoryProvider;

    private Provider<OnboardingModule_ContributeWelcomePreConferenceFragment$mobile_debug.WelcomePreConferenceFragmentSubcomponent.Factory> welcomePreConferenceFragmentSubcomponentFactoryProvider;

    private Provider<OnboardingModule_ContributeWelcomeDuringConferenceFragment$mobile_debug.WelcomeDuringConferenceFragmentSubcomponent.Factory> welcomeDuringConferenceFragmentSubcomponentFactoryProvider;

    private Provider<OnboardingModule_ContributeOnboardingSignInFragment$mobile_debug.OnboardingSignInFragmentSubcomponent.Factory> onboardingSignInFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory> signInDialogFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory> signOutDialogFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory> notificationsPreferenceDialogFragmentSubcomponentFactoryProvider;

    private Provider<OnboardingCompleteActionUseCase> onboardingCompleteActionUseCaseProvider;

    private Provider<OnboardingViewModel> onboardingViewModelProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private OnboardingActivitySubcomponentImpl(OnboardingActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(15).put(LauncherActivity.class, (Provider) DaggerAppComponent.this.launcherActivitySubcomponentFactoryProvider).put(OnboardingActivity.class, (Provider) DaggerAppComponent.this.onboardingActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(SessionDetailActivity.class, (Provider) DaggerAppComponent.this.sessionDetailActivitySubcomponentFactoryProvider).put(AlarmBroadcastReceiver.class, (Provider) DaggerAppComponent.this.alarmBroadcastReceiverSubcomponentFactoryProvider).put(CancelNotificationBroadcastReceiver.class, (Provider) DaggerAppComponent.this.cancelNotificationBroadcastReceiverSubcomponentFactoryProvider).put(IoschedFirebaseMessagingService.class, (Provider) DaggerAppComponent.this.ioschedFirebaseMessagingServiceSubcomponentFactoryProvider).put(ConferenceDataService.class, (Provider) DaggerAppComponent.this.conferenceDataServiceSubcomponentFactoryProvider).put(OnboardingFragment.class, (Provider) onboardingFragmentSubcomponentFactoryProvider).put(WelcomePreConferenceFragment.class, (Provider) welcomePreConferenceFragmentSubcomponentFactoryProvider).put(WelcomeDuringConferenceFragment.class, (Provider) welcomeDuringConferenceFragmentSubcomponentFactoryProvider).put(OnboardingSignInFragment.class, (Provider) onboardingSignInFragmentSubcomponentFactoryProvider).put(SignInDialogFragment.class, (Provider) signInDialogFragmentSubcomponentFactoryProvider).put(SignOutDialogFragment.class, (Provider) signOutDialogFragmentSubcomponentFactoryProvider).put(NotificationsPreferenceDialogFragment.class, (Provider) notificationsPreferenceDialogFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return ImmutableMap.<Class<? extends ViewModel>, Provider<ViewModel>>of(ThemeViewModel.class, (Provider) DaggerAppComponent.this.themeViewModelProvider, OnboardingViewModel.class, (Provider) onboardingViewModelProvider, SignInViewModel.class, (Provider) signInViewModelProvider);}

    private IOSchedViewModelFactory getIOSchedViewModelFactory() {
      return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final OnboardingActivity arg0) {
      this.onboardingFragmentSubcomponentFactoryProvider = new Provider<OnboardingModule_ContributeOnboardingFragment$mobile_debug.OnboardingFragmentSubcomponent.Factory>() {
        @Override
        public OnboardingModule_ContributeOnboardingFragment$mobile_debug.OnboardingFragmentSubcomponent.Factory get(
            ) {
          return new OnboardingFragmentSubcomponentFactory();}
      };
      this.welcomePreConferenceFragmentSubcomponentFactoryProvider = new Provider<OnboardingModule_ContributeWelcomePreConferenceFragment$mobile_debug.WelcomePreConferenceFragmentSubcomponent.Factory>() {
        @Override
        public OnboardingModule_ContributeWelcomePreConferenceFragment$mobile_debug.WelcomePreConferenceFragmentSubcomponent.Factory get(
            ) {
          return new WelcomePreConferenceFragmentSubcomponentFactory();}
      };
      this.welcomeDuringConferenceFragmentSubcomponentFactoryProvider = new Provider<OnboardingModule_ContributeWelcomeDuringConferenceFragment$mobile_debug.WelcomeDuringConferenceFragmentSubcomponent.Factory>() {
        @Override
        public OnboardingModule_ContributeWelcomeDuringConferenceFragment$mobile_debug.WelcomeDuringConferenceFragmentSubcomponent.Factory get(
            ) {
          return new WelcomeDuringConferenceFragmentSubcomponentFactory();}
      };
      this.onboardingSignInFragmentSubcomponentFactoryProvider = new Provider<OnboardingModule_ContributeOnboardingSignInFragment$mobile_debug.OnboardingSignInFragmentSubcomponent.Factory>() {
        @Override
        public OnboardingModule_ContributeOnboardingSignInFragment$mobile_debug.OnboardingSignInFragmentSubcomponent.Factory get(
            ) {
          return new OnboardingSignInFragmentSubcomponentFactory();}
      };
      this.signInDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory get(
            ) {
          return new SignInDialogFragmentSubcomponentFactory();}
      };
      this.signOutDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory get(
            ) {
          return new SignOutDialogFragmentSubcomponentFactory();}
      };
      this.notificationsPreferenceDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory get(
            ) {
          return new NotificationsPreferenceDialogFragmentSubcomponentFactory();}
      };
      this.onboardingCompleteActionUseCaseProvider = OnboardingCompleteActionUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.onboardingViewModelProvider = OnboardingViewModel_Factory.create(onboardingCompleteActionUseCaseProvider, DaggerAppComponent.this.provideSignInViewModelDelegateProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider);
    }

    @Override
    public void inject(OnboardingActivity arg0) {
      injectOnboardingActivity(arg0);}

    @CanIgnoreReturnValue
    private OnboardingActivity injectOnboardingActivity(OnboardingActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      OnboardingActivity_MembersInjector.injectViewModelFactory(instance, getIOSchedViewModelFactory());
      return instance;
    }

    private final class OnboardingFragmentSubcomponentFactory implements OnboardingModule_ContributeOnboardingFragment$mobile_debug.OnboardingFragmentSubcomponent.Factory {
      @Override
      public OnboardingModule_ContributeOnboardingFragment$mobile_debug.OnboardingFragmentSubcomponent create(
          OnboardingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new OnboardingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class OnboardingFragmentSubcomponentImpl implements OnboardingModule_ContributeOnboardingFragment$mobile_debug.OnboardingFragmentSubcomponent {
      private OnboardingFragmentSubcomponentImpl(OnboardingFragment arg0) {

      }

      @Override
      public void inject(OnboardingFragment arg0) {
        injectOnboardingFragment(arg0);}

      @CanIgnoreReturnValue
      private OnboardingFragment injectOnboardingFragment(OnboardingFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, OnboardingActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        OnboardingFragment_MembersInjector.injectViewModelFactory(instance, OnboardingActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class WelcomePreConferenceFragmentSubcomponentFactory implements OnboardingModule_ContributeWelcomePreConferenceFragment$mobile_debug.WelcomePreConferenceFragmentSubcomponent.Factory {
      @Override
      public OnboardingModule_ContributeWelcomePreConferenceFragment$mobile_debug.WelcomePreConferenceFragmentSubcomponent create(
          WelcomePreConferenceFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WelcomePreConferenceFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WelcomePreConferenceFragmentSubcomponentImpl implements OnboardingModule_ContributeWelcomePreConferenceFragment$mobile_debug.WelcomePreConferenceFragmentSubcomponent {
      private WelcomePreConferenceFragmentSubcomponentImpl(WelcomePreConferenceFragment arg0) {

      }

      @Override
      public void inject(WelcomePreConferenceFragment arg0) {
        injectWelcomePreConferenceFragment(arg0);}

      @CanIgnoreReturnValue
      private WelcomePreConferenceFragment injectWelcomePreConferenceFragment(
          WelcomePreConferenceFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, OnboardingActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        WelcomePreConferenceFragment_MembersInjector.injectViewModelFactory(instance, OnboardingActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class WelcomeDuringConferenceFragmentSubcomponentFactory implements OnboardingModule_ContributeWelcomeDuringConferenceFragment$mobile_debug.WelcomeDuringConferenceFragmentSubcomponent.Factory {
      @Override
      public OnboardingModule_ContributeWelcomeDuringConferenceFragment$mobile_debug.WelcomeDuringConferenceFragmentSubcomponent create(
          WelcomeDuringConferenceFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WelcomeDuringConferenceFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WelcomeDuringConferenceFragmentSubcomponentImpl implements OnboardingModule_ContributeWelcomeDuringConferenceFragment$mobile_debug.WelcomeDuringConferenceFragmentSubcomponent {
      private WelcomeDuringConferenceFragmentSubcomponentImpl(
          WelcomeDuringConferenceFragment arg0) {

      }

      @Override
      public void inject(WelcomeDuringConferenceFragment arg0) {
        injectWelcomeDuringConferenceFragment(arg0);}

      @CanIgnoreReturnValue
      private WelcomeDuringConferenceFragment injectWelcomeDuringConferenceFragment(
          WelcomeDuringConferenceFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, OnboardingActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        WelcomeDuringConferenceFragment_MembersInjector.injectViewModelFactory(instance, OnboardingActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class OnboardingSignInFragmentSubcomponentFactory implements OnboardingModule_ContributeOnboardingSignInFragment$mobile_debug.OnboardingSignInFragmentSubcomponent.Factory {
      @Override
      public OnboardingModule_ContributeOnboardingSignInFragment$mobile_debug.OnboardingSignInFragmentSubcomponent create(
          OnboardingSignInFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new OnboardingSignInFragmentSubcomponentImpl(arg0);
      }
    }

    private final class OnboardingSignInFragmentSubcomponentImpl implements OnboardingModule_ContributeOnboardingSignInFragment$mobile_debug.OnboardingSignInFragmentSubcomponent {
      private OnboardingSignInFragmentSubcomponentImpl(OnboardingSignInFragment arg0) {

      }

      @Override
      public void inject(OnboardingSignInFragment arg0) {
        injectOnboardingSignInFragment(arg0);}

      @CanIgnoreReturnValue
      private OnboardingSignInFragment injectOnboardingSignInFragment(
          OnboardingSignInFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, OnboardingActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        OnboardingSignInFragment_MembersInjector.injectViewModelFactory(instance, OnboardingActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SignInDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent create(
          SignInDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SignInDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SignInDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent {
      private SignInDialogFragmentSubcomponentImpl(SignInDialogFragment arg0) {

      }

      @Override
      public void inject(SignInDialogFragment arg0) {
        injectSignInDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private SignInDialogFragment injectSignInDialogFragment(SignInDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, OnboardingActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SignInDialogFragment_MembersInjector.injectSignInHandler(instance, SignInModule_ProvideSignInHandlerFactory.provideSignInHandler(DaggerAppComponent.this.signInModule));
        SignInDialogFragment_MembersInjector.injectViewModelFactory(instance, OnboardingActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SignOutDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent create(
          SignOutDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SignOutDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SignOutDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent {
      private SignOutDialogFragmentSubcomponentImpl(SignOutDialogFragment arg0) {

      }

      @Override
      public void inject(SignOutDialogFragment arg0) {
        injectSignOutDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private SignOutDialogFragment injectSignOutDialogFragment(SignOutDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, OnboardingActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SignOutDialogFragment_MembersInjector.injectSignInHandler(instance, SignInModule_ProvideSignInHandlerFactory.provideSignInHandler(DaggerAppComponent.this.signInModule));
        SignOutDialogFragment_MembersInjector.injectViewModelFactory(instance, OnboardingActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class NotificationsPreferenceDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent create(
          NotificationsPreferenceDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new NotificationsPreferenceDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class NotificationsPreferenceDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent {
      private NotificationsPreferenceDialogFragmentSubcomponentImpl(
          NotificationsPreferenceDialogFragment arg0) {

      }

      private NotificationsPrefSaveActionUseCase getNotificationsPrefSaveActionUseCase() {
        return new NotificationsPrefSaveActionUseCase(DaggerAppComponent.this.providesPreferenceStorageProvider.get());}

      private NotificationsPrefShownActionUseCase getNotificationsPrefShownActionUseCase() {
        return new NotificationsPrefShownActionUseCase(DaggerAppComponent.this.providesPreferenceStorageProvider.get());}

      @Override
      public void inject(NotificationsPreferenceDialogFragment arg0) {
        injectNotificationsPreferenceDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private NotificationsPreferenceDialogFragment injectNotificationsPreferenceDialogFragment(
          NotificationsPreferenceDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, OnboardingActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        NotificationsPreferenceDialogFragment_MembersInjector.injectNotificationsPrefSaveActionUseCase(instance, getNotificationsPrefSaveActionUseCase());
        NotificationsPreferenceDialogFragment_MembersInjector.injectNotificationsPrefShownActionUseCase(instance, getNotificationsPrefShownActionUseCase());
        return instance;
      }
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBindingModule_MainActivity$mobile_debug.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_MainActivity$mobile_debug.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(new EventActionsViewModelDelegateModule(), arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBindingModule_MainActivity$mobile_debug.MainActivitySubcomponent {
    private Provider<AgendaModule_ContributeScheduleAgendaFragment$mobile_debug.AgendaFragmentSubcomponent.Factory> agendaFragmentSubcomponentFactoryProvider;

    private Provider<CodelabsModule_ContributeCodelabsFragment$mobile_debug.CodelabsFragmentSubcomponent.Factory> codelabsFragmentSubcomponentFactoryProvider;

    private Provider<FeedModule_ContributeFeedFragment$mobile_debug.FeedFragmentSubcomponent.Factory> feedFragmentSubcomponentFactoryProvider;

    private Provider<InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent.Factory> infoFragmentSubcomponentFactoryProvider;

    private Provider<MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent.Factory> mapFragmentSubcomponentFactoryProvider;

    private Provider<MapModule_ContributeMapVariantSelectionFragment$mobile_debug.MapVariantSelectionDialogFragmentSubcomponent.Factory> mapVariantSelectionDialogFragmentSubcomponentFactoryProvider;

    private Provider<ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent.Factory> scheduleFragmentSubcomponentFactoryProvider;

    private Provider<ScheduleModule_ContributeScheduleFilterFragment$mobile_debug.ScheduleFilterFragmentSubcomponent.Factory> scheduleFilterFragmentSubcomponentFactoryProvider;

    private Provider<ScheduleModule_ContributeScheduleUiHintsDialogFragment$mobile_debug.ScheduleUiHintsDialogFragmentSubcomponent.Factory> scheduleUiHintsDialogFragmentSubcomponentFactoryProvider;

    private Provider<SearchModule_ContributeSearchFragment$mobile_debug.SearchFragmentSubcomponent.Factory> searchFragmentSubcomponentFactoryProvider;

    private Provider<SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent.Factory> sessionDetailFragmentSubcomponentFactoryProvider;

    private Provider<SettingsModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent.Factory> settingsFragmentSubcomponentFactoryProvider;

    private Provider<SettingsModule_ContributeThemeSettingFragment$mobile_debug.ThemeSettingDialogFragmentSubcomponent.Factory> themeSettingDialogFragmentSubcomponentFactoryProvider;

    private Provider<SpeakerModule_ContributeSpeakerFragment$mobile_debug.SpeakerFragmentSubcomponent.Factory> speakerFragmentSubcomponentFactoryProvider;

    private Provider<ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent.Factory> removeReservationDialogFragmentSubcomponentFactoryProvider;

    private Provider<ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent.Factory> swapReservationDialogFragmentSubcomponentFactoryProvider;

    private Provider<SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent.Factory> sessionFeedbackFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory> signInDialogFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory> signOutDialogFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory> notificationsPreferenceDialogFragmentSubcomponentFactoryProvider;

    private Provider<LoadPinnedSessionsJsonUseCase> loadPinnedSessionsJsonUseCaseProvider;

    private Provider<LoadArDebugFlagUseCase> loadArDebugFlagUseCaseProvider;

    private Provider<MainActivityViewModel> mainActivityViewModelProvider;

    private Provider<LoadAgendaUseCase> loadAgendaUseCaseProvider;

    private Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider;

    private Provider<AgendaViewModel> agendaViewModelProvider;

    private Provider<LoadCodelabsUseCase> loadCodelabsUseCaseProvider;

    private Provider<GetCodelabsInfoCardShownUseCase> getCodelabsInfoCardShownUseCaseProvider;

    private Provider<SetCodelabsInfoCardShownUseCase> setCodelabsInfoCardShownUseCaseProvider;

    private Provider<CodelabsViewModel> codelabsViewModelProvider;

    private Provider<LoadCurrentMomentUseCase> loadCurrentMomentUseCaseProvider;

    private Provider<LoadAnnouncementsUseCase> loadAnnouncementsUseCaseProvider;

    private Provider<LoadFilteredUserSessionsUseCase> loadFilteredUserSessionsUseCaseProvider;

    private Provider<ConferenceStateLiveData> conferenceStateLiveDataProvider;

    private Provider<FeedViewModel> feedViewModelProvider;

    private Provider<WifiInstaller> wifiInstallerProvider;

    private Provider<EventInfoViewModel> eventInfoViewModelProvider;

    private Provider<LoadGeoJsonFeaturesUseCase> loadGeoJsonFeaturesUseCaseProvider;

    private Provider<OptIntoMyLocationUseCase> optIntoMyLocationUseCaseProvider;

    private Provider<MyLocationOptedInUseCase> myLocationOptedInUseCaseProvider;

    private Provider<MapViewModel> mapViewModelProvider;

    private Provider<LoadEventFiltersUseCase> loadEventFiltersUseCaseProvider;

    private Provider<StarEventAndNotifyUseCase> starEventAndNotifyUseCaseProvider;

    private Provider<ScheduleUiHintsShownUseCase> scheduleUiHintsShownUseCaseProvider;

    private Provider<RefreshConferenceDataUseCase> refreshConferenceDataUseCaseProvider;

    private Provider<ObserveConferenceDataUseCase> observeConferenceDataUseCaseProvider;

    private Provider<LoadSelectedFiltersUseCase> loadSelectedFiltersUseCaseProvider;

    private Provider<SaveSelectedFiltersUseCase> saveSelectedFiltersUseCaseProvider;

    private Provider<ScheduleViewModel> scheduleViewModelProvider;

    private Provider<SearchUseCase> searchUseCaseProvider;

    private Provider<SearchDbUseCase> searchDbUseCaseProvider;

    private Provider<SearchViewModel> searchViewModelProvider;

    private Provider<LoadUserSessionUseCase> loadUserSessionUseCaseProvider;

    private Provider<LoadUserSessionsUseCase> loadUserSessionsUseCaseProvider;

    private Provider<ReservationActionUseCase> reservationActionUseCaseProvider;

    private Provider<SessionDetailViewModel> sessionDetailViewModelProvider;

    private Provider<SetTimeZoneUseCase> setTimeZoneUseCaseProvider;

    private Provider<NotificationsPrefSaveActionUseCase> notificationsPrefSaveActionUseCaseProvider;

    private Provider<GetNotificationsSettingUseCase> getNotificationsSettingUseCaseProvider;

    private Provider<SetAnalyticsSettingUseCase> setAnalyticsSettingUseCaseProvider;

    private Provider<GetAnalyticsSettingUseCase> getAnalyticsSettingUseCaseProvider;

    private Provider<SetThemeUseCase> setThemeUseCaseProvider;

    private Provider<SettingsViewModel> settingsViewModelProvider;

    private Provider<LoadSpeakerUseCase> loadSpeakerUseCaseProvider;

    private Provider<EventActionsViewModelDelegate> provideEventActionsViewModelDelegateProvider;

    private Provider<SpeakerViewModel> speakerViewModelProvider;

    private Provider<StopSnackbarActionUseCase> stopSnackbarActionUseCaseProvider;

    private Provider<SnackbarPreferenceViewModel> snackbarPreferenceViewModelProvider;

    private Provider<RemoveReservationViewModel> removeReservationViewModelProvider;

    private Provider<FeedbackUseCase> feedbackUseCaseProvider;

    private Provider<SessionFeedbackViewModel> sessionFeedbackViewModelProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private MainActivitySubcomponentImpl(
        EventActionsViewModelDelegateModule eventActionsViewModelDelegateModuleParam,
        MainActivity arg0) {

      initialize(eventActionsViewModelDelegateModuleParam, arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(28).put(LauncherActivity.class, (Provider) DaggerAppComponent.this.launcherActivitySubcomponentFactoryProvider).put(OnboardingActivity.class, (Provider) DaggerAppComponent.this.onboardingActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(SessionDetailActivity.class, (Provider) DaggerAppComponent.this.sessionDetailActivitySubcomponentFactoryProvider).put(AlarmBroadcastReceiver.class, (Provider) DaggerAppComponent.this.alarmBroadcastReceiverSubcomponentFactoryProvider).put(CancelNotificationBroadcastReceiver.class, (Provider) DaggerAppComponent.this.cancelNotificationBroadcastReceiverSubcomponentFactoryProvider).put(IoschedFirebaseMessagingService.class, (Provider) DaggerAppComponent.this.ioschedFirebaseMessagingServiceSubcomponentFactoryProvider).put(ConferenceDataService.class, (Provider) DaggerAppComponent.this.conferenceDataServiceSubcomponentFactoryProvider).put(AgendaFragment.class, (Provider) agendaFragmentSubcomponentFactoryProvider).put(CodelabsFragment.class, (Provider) codelabsFragmentSubcomponentFactoryProvider).put(FeedFragment.class, (Provider) feedFragmentSubcomponentFactoryProvider).put(InfoFragment.class, (Provider) infoFragmentSubcomponentFactoryProvider).put(MapFragment.class, (Provider) mapFragmentSubcomponentFactoryProvider).put(MapVariantSelectionDialogFragment.class, (Provider) mapVariantSelectionDialogFragmentSubcomponentFactoryProvider).put(ScheduleFragment.class, (Provider) scheduleFragmentSubcomponentFactoryProvider).put(ScheduleFilterFragment.class, (Provider) scheduleFilterFragmentSubcomponentFactoryProvider).put(ScheduleUiHintsDialogFragment.class, (Provider) scheduleUiHintsDialogFragmentSubcomponentFactoryProvider).put(SearchFragment.class, (Provider) searchFragmentSubcomponentFactoryProvider).put(SessionDetailFragment.class, (Provider) sessionDetailFragmentSubcomponentFactoryProvider).put(SettingsFragment.class, (Provider) settingsFragmentSubcomponentFactoryProvider).put(ThemeSettingDialogFragment.class, (Provider) themeSettingDialogFragmentSubcomponentFactoryProvider).put(SpeakerFragment.class, (Provider) speakerFragmentSubcomponentFactoryProvider).put(RemoveReservationDialogFragment.class, (Provider) removeReservationDialogFragmentSubcomponentFactoryProvider).put(SwapReservationDialogFragment.class, (Provider) swapReservationDialogFragmentSubcomponentFactoryProvider).put(SessionFeedbackFragment.class, (Provider) sessionFeedbackFragmentSubcomponentFactoryProvider).put(SignInDialogFragment.class, (Provider) signInDialogFragmentSubcomponentFactoryProvider).put(SignOutDialogFragment.class, (Provider) signOutDialogFragmentSubcomponentFactoryProvider).put(NotificationsPreferenceDialogFragment.class, (Provider) notificationsPreferenceDialogFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return ImmutableMap.<Class<? extends ViewModel>, Provider<ViewModel>>builderWithExpectedSize(16).put(ThemeViewModel.class, (Provider) DaggerAppComponent.this.themeViewModelProvider).put(MainActivityViewModel.class, (Provider) mainActivityViewModelProvider).put(AgendaViewModel.class, (Provider) agendaViewModelProvider).put(CodelabsViewModel.class, (Provider) codelabsViewModelProvider).put(FeedViewModel.class, (Provider) feedViewModelProvider).put(EventInfoViewModel.class, (Provider) eventInfoViewModelProvider).put(MapViewModel.class, (Provider) mapViewModelProvider).put(ScheduleViewModel.class, (Provider) scheduleViewModelProvider).put(SearchViewModel.class, (Provider) searchViewModelProvider).put(SessionDetailViewModel.class, (Provider) sessionDetailViewModelProvider).put(SettingsViewModel.class, (Provider) settingsViewModelProvider).put(SpeakerViewModel.class, (Provider) speakerViewModelProvider).put(SnackbarPreferenceViewModel.class, (Provider) snackbarPreferenceViewModelProvider).put(RemoveReservationViewModel.class, (Provider) removeReservationViewModelProvider).put(SessionFeedbackViewModel.class, (Provider) sessionFeedbackViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).build();}

    private IOSchedViewModelFactory getIOSchedViewModelFactory() {
      return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    private NotificationsPrefSaveActionUseCase getNotificationsPrefSaveActionUseCase() {
      return new NotificationsPrefSaveActionUseCase(DaggerAppComponent.this.providesPreferenceStorageProvider.get());}

    @SuppressWarnings("unchecked")
    private void initialize(
        final EventActionsViewModelDelegateModule eventActionsViewModelDelegateModuleParam,
        final MainActivity arg0) {
      this.agendaFragmentSubcomponentFactoryProvider = new Provider<AgendaModule_ContributeScheduleAgendaFragment$mobile_debug.AgendaFragmentSubcomponent.Factory>() {
        @Override
        public AgendaModule_ContributeScheduleAgendaFragment$mobile_debug.AgendaFragmentSubcomponent.Factory get(
            ) {
          return new AgendaFragmentSubcomponentFactory();}
      };
      this.codelabsFragmentSubcomponentFactoryProvider = new Provider<CodelabsModule_ContributeCodelabsFragment$mobile_debug.CodelabsFragmentSubcomponent.Factory>() {
        @Override
        public CodelabsModule_ContributeCodelabsFragment$mobile_debug.CodelabsFragmentSubcomponent.Factory get(
            ) {
          return new CodelabsFragmentSubcomponentFactory();}
      };
      this.feedFragmentSubcomponentFactoryProvider = new Provider<FeedModule_ContributeFeedFragment$mobile_debug.FeedFragmentSubcomponent.Factory>() {
        @Override
        public FeedModule_ContributeFeedFragment$mobile_debug.FeedFragmentSubcomponent.Factory get(
            ) {
          return new FeedFragmentSubcomponentFactory();}
      };
      this.infoFragmentSubcomponentFactoryProvider = new Provider<InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent.Factory>() {
        @Override
        public InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent.Factory get(
            ) {
          return new InfoFragmentSubcomponentFactory();}
      };
      this.mapFragmentSubcomponentFactoryProvider = new Provider<MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent.Factory>() {
        @Override
        public MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent.Factory get() {
          return new MapFragmentSubcomponentFactory();}
      };
      this.mapVariantSelectionDialogFragmentSubcomponentFactoryProvider = new Provider<MapModule_ContributeMapVariantSelectionFragment$mobile_debug.MapVariantSelectionDialogFragmentSubcomponent.Factory>() {
        @Override
        public MapModule_ContributeMapVariantSelectionFragment$mobile_debug.MapVariantSelectionDialogFragmentSubcomponent.Factory get(
            ) {
          return new MapVariantSelectionDialogFragmentSubcomponentFactory();}
      };
      this.scheduleFragmentSubcomponentFactoryProvider = new Provider<ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent.Factory>() {
        @Override
        public ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent.Factory get(
            ) {
          return new ScheduleFragmentSubcomponentFactory();}
      };
      this.scheduleFilterFragmentSubcomponentFactoryProvider = new Provider<ScheduleModule_ContributeScheduleFilterFragment$mobile_debug.ScheduleFilterFragmentSubcomponent.Factory>() {
        @Override
        public ScheduleModule_ContributeScheduleFilterFragment$mobile_debug.ScheduleFilterFragmentSubcomponent.Factory get(
            ) {
          return new ScheduleFilterFragmentSubcomponentFactory();}
      };
      this.scheduleUiHintsDialogFragmentSubcomponentFactoryProvider = new Provider<ScheduleModule_ContributeScheduleUiHintsDialogFragment$mobile_debug.ScheduleUiHintsDialogFragmentSubcomponent.Factory>() {
        @Override
        public ScheduleModule_ContributeScheduleUiHintsDialogFragment$mobile_debug.ScheduleUiHintsDialogFragmentSubcomponent.Factory get(
            ) {
          return new ScheduleUiHintsDialogFragmentSubcomponentFactory();}
      };
      this.searchFragmentSubcomponentFactoryProvider = new Provider<SearchModule_ContributeSearchFragment$mobile_debug.SearchFragmentSubcomponent.Factory>() {
        @Override
        public SearchModule_ContributeSearchFragment$mobile_debug.SearchFragmentSubcomponent.Factory get(
            ) {
          return new SearchFragmentSubcomponentFactory();}
      };
      this.sessionDetailFragmentSubcomponentFactoryProvider = new Provider<SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent.Factory>() {
        @Override
        public SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent.Factory get(
            ) {
          return new SessionDetailFragmentSubcomponentFactory();}
      };
      this.settingsFragmentSubcomponentFactoryProvider = new Provider<SettingsModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent.Factory>() {
        @Override
        public SettingsModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent.Factory get(
            ) {
          return new SettingsFragmentSubcomponentFactory();}
      };
      this.themeSettingDialogFragmentSubcomponentFactoryProvider = new Provider<SettingsModule_ContributeThemeSettingFragment$mobile_debug.ThemeSettingDialogFragmentSubcomponent.Factory>() {
        @Override
        public SettingsModule_ContributeThemeSettingFragment$mobile_debug.ThemeSettingDialogFragmentSubcomponent.Factory get(
            ) {
          return new ThemeSettingDialogFragmentSubcomponentFactory();}
      };
      this.speakerFragmentSubcomponentFactoryProvider = new Provider<SpeakerModule_ContributeSpeakerFragment$mobile_debug.SpeakerFragmentSubcomponent.Factory>() {
        @Override
        public SpeakerModule_ContributeSpeakerFragment$mobile_debug.SpeakerFragmentSubcomponent.Factory get(
            ) {
          return new SpeakerFragmentSubcomponentFactory();}
      };
      this.removeReservationDialogFragmentSubcomponentFactoryProvider = new Provider<ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent.Factory>() {
        @Override
        public ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent.Factory get(
            ) {
          return new RemoveReservationDialogFragmentSubcomponentFactory();}
      };
      this.swapReservationDialogFragmentSubcomponentFactoryProvider = new Provider<ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent.Factory>() {
        @Override
        public ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent.Factory get(
            ) {
          return new SwapReservationDialogFragmentSubcomponentFactory();}
      };
      this.sessionFeedbackFragmentSubcomponentFactoryProvider = new Provider<SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent.Factory>() {
        @Override
        public SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent.Factory get(
            ) {
          return new SessionFeedbackFragmentSubcomponentFactory();}
      };
      this.signInDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory get(
            ) {
          return new SignInDialogFragmentSubcomponentFactory();}
      };
      this.signOutDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory get(
            ) {
          return new SignOutDialogFragmentSubcomponentFactory();}
      };
      this.notificationsPreferenceDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory get(
            ) {
          return new NotificationsPreferenceDialogFragmentSubcomponentFactory();}
      };
      this.loadPinnedSessionsJsonUseCaseProvider = LoadPinnedSessionsJsonUseCase_Factory.create(DaggerAppComponent.this.defaultSessionAndUserEventRepositoryProvider);
      this.loadArDebugFlagUseCaseProvider = LoadArDebugFlagUseCase_Factory.create(DaggerAppComponent.this.provideArDebugFlagEndpointProvider);
      this.mainActivityViewModelProvider = MainActivityViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider, DaggerAppComponent.this.provideThemedActivityDelegateProvider, loadPinnedSessionsJsonUseCaseProvider, loadArDebugFlagUseCaseProvider, DaggerAppComponent.this.provideContextProvider);
      this.loadAgendaUseCaseProvider = LoadAgendaUseCase_Factory.create(DaggerAppComponent.this.provideAgendaRepositoryProvider);
      this.getTimeZoneUseCaseProvider = GetTimeZoneUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.agendaViewModelProvider = AgendaViewModel_Factory.create(loadAgendaUseCaseProvider, getTimeZoneUseCaseProvider);
      this.loadCodelabsUseCaseProvider = LoadCodelabsUseCase_Factory.create(DaggerAppComponent.this.codelabsRepositoryProvider);
      this.getCodelabsInfoCardShownUseCaseProvider = GetCodelabsInfoCardShownUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.setCodelabsInfoCardShownUseCaseProvider = SetCodelabsInfoCardShownUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.codelabsViewModelProvider = CodelabsViewModel_Factory.create(loadCodelabsUseCaseProvider, getCodelabsInfoCardShownUseCaseProvider, setCodelabsInfoCardShownUseCaseProvider);
      this.loadCurrentMomentUseCaseProvider = LoadCurrentMomentUseCase_Factory.create(DaggerAppComponent.this.provideFeedRepositoryProvider);
      this.loadAnnouncementsUseCaseProvider = LoadAnnouncementsUseCase_Factory.create(DaggerAppComponent.this.provideFeedRepositoryProvider);
      this.loadFilteredUserSessionsUseCaseProvider = LoadFilteredUserSessionsUseCase_Factory.create(DaggerAppComponent.this.defaultSessionAndUserEventRepositoryProvider);
      this.conferenceStateLiveDataProvider = ConferenceStateLiveData_Factory.create(DaggerAppComponent.this.providesMainThreadHandlerProvider, DaggerAppComponent.this.provideTimeProvider);
      this.feedViewModelProvider = FeedViewModel_Factory.create(loadCurrentMomentUseCaseProvider, loadAnnouncementsUseCaseProvider, loadFilteredUserSessionsUseCaseProvider, getTimeZoneUseCaseProvider, conferenceStateLiveDataProvider, DaggerAppComponent.this.provideTimeProvider, DaggerAppComponent.this.providesAnalyticsHelperProvider, DaggerAppComponent.this.provideSignInViewModelDelegateProvider, DaggerAppComponent.this.provideThemedActivityDelegateProvider);
      this.wifiInstallerProvider = WifiInstaller_Factory.create(DaggerAppComponent.this.providesWifiManagerProvider, DaggerAppComponent.this.providesClipboardManagerProvider);
      this.eventInfoViewModelProvider = EventInfoViewModel_Factory.create(DaggerAppComponent.this.loadWifiInfoUseCaseProvider, wifiInstallerProvider, DaggerAppComponent.this.providesAnalyticsHelperProvider);
      this.loadGeoJsonFeaturesUseCaseProvider = LoadGeoJsonFeaturesUseCase_Factory.create(DaggerAppComponent.this.provideContextProvider);
      this.optIntoMyLocationUseCaseProvider = OptIntoMyLocationUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.myLocationOptedInUseCaseProvider = MyLocationOptedInUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.mapViewModelProvider = MapViewModel_Factory.create(loadGeoJsonFeaturesUseCaseProvider, DaggerAppComponent.this.providesAnalyticsHelperProvider, DaggerAppComponent.this.provideSignInViewModelDelegateProvider, optIntoMyLocationUseCaseProvider, myLocationOptedInUseCaseProvider);
      this.loadEventFiltersUseCaseProvider = LoadEventFiltersUseCase_Factory.create(DaggerAppComponent.this.tagRepositoryProvider);
      this.starEventAndNotifyUseCaseProvider = StarEventAndNotifyUseCase_Factory.create(DaggerAppComponent.this.provideSessionAndUserEventRepositoryProvider, DaggerAppComponent.this.starReserveNotificationAlarmUpdaterProvider);
      this.scheduleUiHintsShownUseCaseProvider = ScheduleUiHintsShownUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.refreshConferenceDataUseCaseProvider = RefreshConferenceDataUseCase_Factory.create(DaggerAppComponent.this.provideConferenceDataRepositoryProvider);
      this.observeConferenceDataUseCaseProvider = ObserveConferenceDataUseCase_Factory.create(DaggerAppComponent.this.provideConferenceDataRepositoryProvider);
      this.loadSelectedFiltersUseCaseProvider = LoadSelectedFiltersUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.saveSelectedFiltersUseCaseProvider = SaveSelectedFiltersUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.scheduleViewModelProvider = ScheduleViewModel_Factory.create(loadFilteredUserSessionsUseCaseProvider, loadEventFiltersUseCaseProvider, DaggerAppComponent.this.provideSignInViewModelDelegateProvider, starEventAndNotifyUseCaseProvider, scheduleUiHintsShownUseCaseProvider, DaggerAppComponent.this.provideTopicSubscriberProvider, DaggerAppComponent.this.snackbarMessageManagerProvider, getTimeZoneUseCaseProvider, refreshConferenceDataUseCaseProvider, observeConferenceDataUseCaseProvider, loadSelectedFiltersUseCaseProvider, saveSelectedFiltersUseCaseProvider, DaggerAppComponent.this.providesAnalyticsHelperProvider);
      this.searchUseCaseProvider = SearchUseCase_Factory.create(DaggerAppComponent.this.provideSessionRepositoryProvider);
      this.searchDbUseCaseProvider = SearchDbUseCase_Factory.create(DaggerAppComponent.this.provideSessionRepositoryProvider, DaggerAppComponent.this.provideConferenceDataRepositoryProvider, DaggerAppComponent.this.providesAppDatabaseProvider);
      this.searchViewModelProvider = SearchViewModel_Factory.create(DaggerAppComponent.this.providesAnalyticsHelperProvider, searchUseCaseProvider, searchDbUseCaseProvider, DaggerAppComponent.this.provideSearchUsingRoomEnabledFlagProvider);
      this.loadUserSessionUseCaseProvider = LoadUserSessionUseCase_Factory.create(DaggerAppComponent.this.defaultSessionAndUserEventRepositoryProvider);
      this.loadUserSessionsUseCaseProvider = LoadUserSessionsUseCase_Factory.create(DaggerAppComponent.this.defaultSessionAndUserEventRepositoryProvider);
      this.reservationActionUseCaseProvider = ReservationActionUseCase_Factory.create(DaggerAppComponent.this.provideSessionAndUserEventRepositoryProvider, DaggerAppComponent.this.starReserveNotificationAlarmUpdaterProvider);
      this.sessionDetailViewModelProvider = SessionDetailViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider, loadUserSessionUseCaseProvider, loadUserSessionsUseCaseProvider, starEventAndNotifyUseCaseProvider, reservationActionUseCaseProvider, getTimeZoneUseCaseProvider, DaggerAppComponent.this.snackbarMessageManagerProvider, DaggerAppComponent.this.provideTimeProvider, DaggerAppComponent.this.networkUtilsProvider, DaggerAppComponent.this.providesAnalyticsHelperProvider);
      this.setTimeZoneUseCaseProvider = SetTimeZoneUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.notificationsPrefSaveActionUseCaseProvider = NotificationsPrefSaveActionUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.getNotificationsSettingUseCaseProvider = GetNotificationsSettingUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.setAnalyticsSettingUseCaseProvider = SetAnalyticsSettingUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.getAnalyticsSettingUseCaseProvider = GetAnalyticsSettingUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.setThemeUseCaseProvider = SetThemeUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.settingsViewModelProvider = SettingsViewModel_Factory.create(setTimeZoneUseCaseProvider, getTimeZoneUseCaseProvider, notificationsPrefSaveActionUseCaseProvider, getNotificationsSettingUseCaseProvider, setAnalyticsSettingUseCaseProvider, getAnalyticsSettingUseCaseProvider, setThemeUseCaseProvider, DaggerAppComponent.this.getThemeUseCaseProvider, GetAvailableThemesUseCase_Factory.create());
      this.loadSpeakerUseCaseProvider = LoadSpeakerUseCase_Factory.create(DaggerAppComponent.this.provideConferenceDataRepositoryProvider);
      this.provideEventActionsViewModelDelegateProvider = EventActionsViewModelDelegateModule_ProvideEventActionsViewModelDelegateFactory.create(eventActionsViewModelDelegateModuleParam, DaggerAppComponent.this.provideSignInViewModelDelegateProvider, starEventAndNotifyUseCaseProvider, DaggerAppComponent.this.snackbarMessageManagerProvider);
      this.speakerViewModelProvider = SpeakerViewModel_Factory.create(loadSpeakerUseCaseProvider, loadUserSessionsUseCaseProvider, getTimeZoneUseCaseProvider, DaggerAppComponent.this.provideSignInViewModelDelegateProvider, provideEventActionsViewModelDelegateProvider, DaggerAppComponent.this.providesAnalyticsHelperProvider);
      this.stopSnackbarActionUseCaseProvider = StopSnackbarActionUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.snackbarPreferenceViewModelProvider = SnackbarPreferenceViewModel_Factory.create(stopSnackbarActionUseCaseProvider);
      this.removeReservationViewModelProvider = RemoveReservationViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider, loadUserSessionUseCaseProvider, reservationActionUseCaseProvider);
      this.feedbackUseCaseProvider = FeedbackUseCase_Factory.create(DaggerAppComponent.this.provideFeedbackEndpointProvider, DaggerAppComponent.this.provideSessionAndUserEventRepositoryProvider);
      this.sessionFeedbackViewModelProvider = SessionFeedbackViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider, loadUserSessionUseCaseProvider, feedbackUseCaseProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectSnackbarMessageManager(instance, DaggerAppComponent.this.snackbarMessageManagerProvider.get());
      MainActivity_MembersInjector.injectViewModelFactory(instance, getIOSchedViewModelFactory());
      MainActivity_MembersInjector.injectConnectivityManager(instance, DaggerAppComponent.this.getConnectivityManager());
      MainActivity_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
      MainActivity_MembersInjector.injectMapFeatureEnabled(instance, DaggerAppComponent.this.getMapFeatureEnabledFlagBoolean());
      MainActivity_MembersInjector.injectCodelabsFeatureEnabled(instance, DaggerAppComponent.this.getCodelabsEnabledFlagBoolean());
      MainActivity_MembersInjector.injectExploreArFeatureEnabled(instance, DaggerAppComponent.this.provideEnableExploreArFlagProvider.get());
      return instance;
    }

    private final class AgendaFragmentSubcomponentFactory implements AgendaModule_ContributeScheduleAgendaFragment$mobile_debug.AgendaFragmentSubcomponent.Factory {
      @Override
      public AgendaModule_ContributeScheduleAgendaFragment$mobile_debug.AgendaFragmentSubcomponent create(
          AgendaFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new AgendaFragmentSubcomponentImpl(arg0);
      }
    }

    private final class AgendaFragmentSubcomponentImpl implements AgendaModule_ContributeScheduleAgendaFragment$mobile_debug.AgendaFragmentSubcomponent {
      private AgendaFragmentSubcomponentImpl(AgendaFragment arg0) {

      }

      @Override
      public void inject(AgendaFragment arg0) {
        injectAgendaFragment(arg0);}

      @CanIgnoreReturnValue
      private AgendaFragment injectAgendaFragment(AgendaFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        AgendaFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class CodelabsFragmentSubcomponentFactory implements CodelabsModule_ContributeCodelabsFragment$mobile_debug.CodelabsFragmentSubcomponent.Factory {
      @Override
      public CodelabsModule_ContributeCodelabsFragment$mobile_debug.CodelabsFragmentSubcomponent create(
          CodelabsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CodelabsFragmentSubcomponentImpl(new SessionViewPoolModule(), arg0);
      }
    }

    private final class CodelabsFragmentSubcomponentImpl implements CodelabsModule_ContributeCodelabsFragment$mobile_debug.CodelabsFragmentSubcomponent {
      private Provider<RecyclerView.RecycledViewPool> providesTagViewPoolProvider;

      private CodelabsFragmentSubcomponentImpl(SessionViewPoolModule sessionViewPoolModuleParam,
          CodelabsFragment arg0) {

        initialize(sessionViewPoolModuleParam, arg0);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final SessionViewPoolModule sessionViewPoolModuleParam,
          final CodelabsFragment arg0) {
        this.providesTagViewPoolProvider = DoubleCheck.provider(SessionViewPoolModule_ProvidesTagViewPoolFactory.create(sessionViewPoolModuleParam));
      }

      @Override
      public void inject(CodelabsFragment arg0) {
        injectCodelabsFragment(arg0);}

      @CanIgnoreReturnValue
      private CodelabsFragment injectCodelabsFragment(CodelabsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        CodelabsFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        CodelabsFragment_MembersInjector.injectTagRecycledViewPool(instance, providesTagViewPoolProvider.get());
        CodelabsFragment_MembersInjector.injectMapFeatureEnabled(instance, DaggerAppComponent.this.getMapFeatureEnabledFlagBoolean());
        CodelabsFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        return instance;
      }
    }

    private final class FeedFragmentSubcomponentFactory implements FeedModule_ContributeFeedFragment$mobile_debug.FeedFragmentSubcomponent.Factory {
      @Override
      public FeedModule_ContributeFeedFragment$mobile_debug.FeedFragmentSubcomponent create(
          FeedFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FeedFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FeedFragmentSubcomponentImpl implements FeedModule_ContributeFeedFragment$mobile_debug.FeedFragmentSubcomponent {
      private FeedFragmentSubcomponentImpl(FeedFragment arg0) {

      }

      @Override
      public void inject(FeedFragment arg0) {
        injectFeedFragment(arg0);}

      @CanIgnoreReturnValue
      private FeedFragment injectFeedFragment(FeedFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        FeedFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        FeedFragment_MembersInjector.injectSnackbarMessageManager(instance, DaggerAppComponent.this.snackbarMessageManagerProvider.get());
        FeedFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        return instance;
      }
    }

    private final class InfoFragmentSubcomponentFactory implements InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent.Factory {
      @Override
      public InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent create(
          InfoFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new InfoFragmentSubcomponentImpl(arg0);
      }
    }

    private final class InfoFragmentSubcomponentImpl implements InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent {
      private Provider<InfoFragmentsModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent.Factory> eventFragmentSubcomponentFactoryProvider;

      private Provider<InfoFragmentsModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent.Factory> travelFragmentSubcomponentFactoryProvider;

      private Provider<InfoFragmentsModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent.Factory> faqFragmentSubcomponentFactoryProvider;

      private InfoFragmentSubcomponentImpl(InfoFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
          ) {
        return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(31).put(LauncherActivity.class, (Provider) DaggerAppComponent.this.launcherActivitySubcomponentFactoryProvider).put(OnboardingActivity.class, (Provider) DaggerAppComponent.this.onboardingActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(SessionDetailActivity.class, (Provider) DaggerAppComponent.this.sessionDetailActivitySubcomponentFactoryProvider).put(AlarmBroadcastReceiver.class, (Provider) DaggerAppComponent.this.alarmBroadcastReceiverSubcomponentFactoryProvider).put(CancelNotificationBroadcastReceiver.class, (Provider) DaggerAppComponent.this.cancelNotificationBroadcastReceiverSubcomponentFactoryProvider).put(IoschedFirebaseMessagingService.class, (Provider) DaggerAppComponent.this.ioschedFirebaseMessagingServiceSubcomponentFactoryProvider).put(ConferenceDataService.class, (Provider) DaggerAppComponent.this.conferenceDataServiceSubcomponentFactoryProvider).put(AgendaFragment.class, (Provider) MainActivitySubcomponentImpl.this.agendaFragmentSubcomponentFactoryProvider).put(CodelabsFragment.class, (Provider) MainActivitySubcomponentImpl.this.codelabsFragmentSubcomponentFactoryProvider).put(FeedFragment.class, (Provider) MainActivitySubcomponentImpl.this.feedFragmentSubcomponentFactoryProvider).put(InfoFragment.class, (Provider) MainActivitySubcomponentImpl.this.infoFragmentSubcomponentFactoryProvider).put(MapFragment.class, (Provider) MainActivitySubcomponentImpl.this.mapFragmentSubcomponentFactoryProvider).put(MapVariantSelectionDialogFragment.class, (Provider) MainActivitySubcomponentImpl.this.mapVariantSelectionDialogFragmentSubcomponentFactoryProvider).put(ScheduleFragment.class, (Provider) MainActivitySubcomponentImpl.this.scheduleFragmentSubcomponentFactoryProvider).put(ScheduleFilterFragment.class, (Provider) MainActivitySubcomponentImpl.this.scheduleFilterFragmentSubcomponentFactoryProvider).put(ScheduleUiHintsDialogFragment.class, (Provider) MainActivitySubcomponentImpl.this.scheduleUiHintsDialogFragmentSubcomponentFactoryProvider).put(SearchFragment.class, (Provider) MainActivitySubcomponentImpl.this.searchFragmentSubcomponentFactoryProvider).put(SessionDetailFragment.class, (Provider) MainActivitySubcomponentImpl.this.sessionDetailFragmentSubcomponentFactoryProvider).put(SettingsFragment.class, (Provider) MainActivitySubcomponentImpl.this.settingsFragmentSubcomponentFactoryProvider).put(ThemeSettingDialogFragment.class, (Provider) MainActivitySubcomponentImpl.this.themeSettingDialogFragmentSubcomponentFactoryProvider).put(SpeakerFragment.class, (Provider) MainActivitySubcomponentImpl.this.speakerFragmentSubcomponentFactoryProvider).put(RemoveReservationDialogFragment.class, (Provider) MainActivitySubcomponentImpl.this.removeReservationDialogFragmentSubcomponentFactoryProvider).put(SwapReservationDialogFragment.class, (Provider) MainActivitySubcomponentImpl.this.swapReservationDialogFragmentSubcomponentFactoryProvider).put(SessionFeedbackFragment.class, (Provider) MainActivitySubcomponentImpl.this.sessionFeedbackFragmentSubcomponentFactoryProvider).put(SignInDialogFragment.class, (Provider) MainActivitySubcomponentImpl.this.signInDialogFragmentSubcomponentFactoryProvider).put(SignOutDialogFragment.class, (Provider) MainActivitySubcomponentImpl.this.signOutDialogFragmentSubcomponentFactoryProvider).put(NotificationsPreferenceDialogFragment.class, (Provider) MainActivitySubcomponentImpl.this.notificationsPreferenceDialogFragmentSubcomponentFactoryProvider).put(EventFragment.class, (Provider) eventFragmentSubcomponentFactoryProvider).put(TravelFragment.class, (Provider) travelFragmentSubcomponentFactoryProvider).put(FaqFragment.class, (Provider) faqFragmentSubcomponentFactoryProvider).build();}

      private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
        return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

      @SuppressWarnings("unchecked")
      private void initialize(final InfoFragment arg0) {
        this.eventFragmentSubcomponentFactoryProvider = new Provider<InfoFragmentsModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent.Factory>() {
          @Override
          public InfoFragmentsModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent.Factory get(
              ) {
            return new EventFragmentSubcomponentFactory();}
        };
        this.travelFragmentSubcomponentFactoryProvider = new Provider<InfoFragmentsModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent.Factory>() {
          @Override
          public InfoFragmentsModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent.Factory get(
              ) {
            return new TravelFragmentSubcomponentFactory();}
        };
        this.faqFragmentSubcomponentFactoryProvider = new Provider<InfoFragmentsModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent.Factory>() {
          @Override
          public InfoFragmentsModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent.Factory get(
              ) {
            return new FaqFragmentSubcomponentFactory();}
        };
      }

      @Override
      public void inject(InfoFragment arg0) {
        injectInfoFragment(arg0);}

      @CanIgnoreReturnValue
      private InfoFragment injectInfoFragment(InfoFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
        InfoFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        InfoFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }

      private final class EventFragmentSubcomponentFactory implements InfoFragmentsModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent.Factory {
        @Override
        public InfoFragmentsModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent create(
            EventFragment arg0) {
          Preconditions.checkNotNull(arg0);
          return new EventFragmentSubcomponentImpl(arg0);
        }
      }

      private final class EventFragmentSubcomponentImpl implements InfoFragmentsModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent {
        private EventFragmentSubcomponentImpl(EventFragment arg0) {

        }

        @Override
        public void inject(EventFragment arg0) {
          injectEventFragment(arg0);}

        @CanIgnoreReturnValue
        private EventFragment injectEventFragment(EventFragment instance) {
          DaggerFragment_MembersInjector.injectAndroidInjector(instance, InfoFragmentSubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
          EventFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
          EventFragment_MembersInjector.injectSnackbarMessageManager(instance, DaggerAppComponent.this.snackbarMessageManagerProvider.get());
          EventFragment_MembersInjector.injectAssistantAppEnabled(instance, DaggerAppComponent.this.getAssistantAppEnabledFlagBoolean());
          return instance;
        }
      }

      private final class TravelFragmentSubcomponentFactory implements InfoFragmentsModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent.Factory {
        @Override
        public InfoFragmentsModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent create(
            TravelFragment arg0) {
          Preconditions.checkNotNull(arg0);
          return new TravelFragmentSubcomponentImpl(arg0);
        }
      }

      private final class TravelFragmentSubcomponentImpl implements InfoFragmentsModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent {
        private TravelFragmentSubcomponentImpl(TravelFragment arg0) {

        }

        @Override
        public void inject(TravelFragment arg0) {
          injectTravelFragment(arg0);}

        @CanIgnoreReturnValue
        private TravelFragment injectTravelFragment(TravelFragment instance) {
          DaggerFragment_MembersInjector.injectAndroidInjector(instance, InfoFragmentSubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
          return instance;
        }
      }

      private final class FaqFragmentSubcomponentFactory implements InfoFragmentsModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent.Factory {
        @Override
        public InfoFragmentsModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent create(
            FaqFragment arg0) {
          Preconditions.checkNotNull(arg0);
          return new FaqFragmentSubcomponentImpl(arg0);
        }
      }

      private final class FaqFragmentSubcomponentImpl implements InfoFragmentsModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent {
        private FaqFragmentSubcomponentImpl(FaqFragment arg0) {

        }

        @Override
        public void inject(FaqFragment arg0) {
          injectFaqFragment(arg0);}

        @CanIgnoreReturnValue
        private FaqFragment injectFaqFragment(FaqFragment instance) {
          DaggerFragment_MembersInjector.injectAndroidInjector(instance, InfoFragmentSubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
          return instance;
        }
      }
    }

    private final class MapFragmentSubcomponentFactory implements MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent.Factory {
      @Override
      public MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent create(
          MapFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MapFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MapFragmentSubcomponentImpl implements MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent {
      private MapFragmentSubcomponentImpl(MapFragment arg0) {

      }

      @Override
      public void inject(MapFragment arg0) {
        injectMapFragment(arg0);}

      @CanIgnoreReturnValue
      private MapFragment injectMapFragment(MapFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        MapFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        MapFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        return instance;
      }
    }

    private final class MapVariantSelectionDialogFragmentSubcomponentFactory implements MapModule_ContributeMapVariantSelectionFragment$mobile_debug.MapVariantSelectionDialogFragmentSubcomponent.Factory {
      @Override
      public MapModule_ContributeMapVariantSelectionFragment$mobile_debug.MapVariantSelectionDialogFragmentSubcomponent create(
          MapVariantSelectionDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MapVariantSelectionDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MapVariantSelectionDialogFragmentSubcomponentImpl implements MapModule_ContributeMapVariantSelectionFragment$mobile_debug.MapVariantSelectionDialogFragmentSubcomponent {
      private MapVariantSelectionDialogFragmentSubcomponentImpl(
          MapVariantSelectionDialogFragment arg0) {

      }

      @Override
      public void inject(MapVariantSelectionDialogFragment arg0) {
        injectMapVariantSelectionDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private MapVariantSelectionDialogFragment injectMapVariantSelectionDialogFragment(
          MapVariantSelectionDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        MapVariantSelectionDialogFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class ScheduleFragmentSubcomponentFactory implements ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent.Factory {
      @Override
      public ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent create(
          ScheduleFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ScheduleFragmentSubcomponentImpl(new SessionViewPoolModule(), arg0);
      }
    }

    private final class ScheduleFragmentSubcomponentImpl implements ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent {
      private Provider<RecyclerView.RecycledViewPool> providesTagViewPoolProvider;

      private ScheduleFragmentSubcomponentImpl(SessionViewPoolModule sessionViewPoolModuleParam,
          ScheduleFragment arg0) {

        initialize(sessionViewPoolModuleParam, arg0);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final SessionViewPoolModule sessionViewPoolModuleParam,
          final ScheduleFragment arg0) {
        this.providesTagViewPoolProvider = DoubleCheck.provider(SessionViewPoolModule_ProvidesTagViewPoolFactory.create(sessionViewPoolModuleParam));
      }

      @Override
      public void inject(ScheduleFragment arg0) {
        injectScheduleFragment(arg0);}

      @CanIgnoreReturnValue
      private ScheduleFragment injectScheduleFragment(ScheduleFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        ScheduleFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        ScheduleFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        ScheduleFragment_MembersInjector.injectTagViewPool(instance, providesTagViewPoolProvider.get());
        ScheduleFragment_MembersInjector.injectSearchScheduleFeatureEnabled(instance, DaggerAppComponent.this.getSearchScheduleEnabledFlagBoolean());
        ScheduleFragment_MembersInjector.injectSnackbarMessageManager(instance, DaggerAppComponent.this.snackbarMessageManagerProvider.get());
        return instance;
      }
    }

    private final class ScheduleFilterFragmentSubcomponentFactory implements ScheduleModule_ContributeScheduleFilterFragment$mobile_debug.ScheduleFilterFragmentSubcomponent.Factory {
      @Override
      public ScheduleModule_ContributeScheduleFilterFragment$mobile_debug.ScheduleFilterFragmentSubcomponent create(
          ScheduleFilterFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ScheduleFilterFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ScheduleFilterFragmentSubcomponentImpl implements ScheduleModule_ContributeScheduleFilterFragment$mobile_debug.ScheduleFilterFragmentSubcomponent {
      private ScheduleFilterFragmentSubcomponentImpl(ScheduleFilterFragment arg0) {

      }

      @Override
      public void inject(ScheduleFilterFragment arg0) {
        injectScheduleFilterFragment(arg0);}

      @CanIgnoreReturnValue
      private ScheduleFilterFragment injectScheduleFilterFragment(ScheduleFilterFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        ScheduleFilterFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class ScheduleUiHintsDialogFragmentSubcomponentFactory implements ScheduleModule_ContributeScheduleUiHintsDialogFragment$mobile_debug.ScheduleUiHintsDialogFragmentSubcomponent.Factory {
      @Override
      public ScheduleModule_ContributeScheduleUiHintsDialogFragment$mobile_debug.ScheduleUiHintsDialogFragmentSubcomponent create(
          ScheduleUiHintsDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ScheduleUiHintsDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ScheduleUiHintsDialogFragmentSubcomponentImpl implements ScheduleModule_ContributeScheduleUiHintsDialogFragment$mobile_debug.ScheduleUiHintsDialogFragmentSubcomponent {
      private ScheduleUiHintsDialogFragmentSubcomponentImpl(ScheduleUiHintsDialogFragment arg0) {

      }

      private MarkScheduleUiHintsShownUseCase getMarkScheduleUiHintsShownUseCase() {
        return new MarkScheduleUiHintsShownUseCase(DaggerAppComponent.this.providesPreferenceStorageProvider.get());}

      @Override
      public void inject(ScheduleUiHintsDialogFragment arg0) {
        injectScheduleUiHintsDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private ScheduleUiHintsDialogFragment injectScheduleUiHintsDialogFragment(
          ScheduleUiHintsDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        ScheduleUiHintsDialogFragment_MembersInjector.injectMarkScheduleUiHintsShownUseCase(instance, getMarkScheduleUiHintsShownUseCase());
        return instance;
      }
    }

    private final class SearchFragmentSubcomponentFactory implements SearchModule_ContributeSearchFragment$mobile_debug.SearchFragmentSubcomponent.Factory {
      @Override
      public SearchModule_ContributeSearchFragment$mobile_debug.SearchFragmentSubcomponent create(
          SearchFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SearchFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SearchFragmentSubcomponentImpl implements SearchModule_ContributeSearchFragment$mobile_debug.SearchFragmentSubcomponent {
      private SearchFragmentSubcomponentImpl(SearchFragment arg0) {

      }

      @Override
      public void inject(SearchFragment arg0) {
        injectSearchFragment(arg0);}

      @CanIgnoreReturnValue
      private SearchFragment injectSearchFragment(SearchFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SearchFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        SearchFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SessionDetailFragmentSubcomponentFactory implements SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent.Factory {
      @Override
      public SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent create(
          SessionDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SessionDetailFragmentSubcomponentImpl(new SessionViewPoolModule(), arg0);
      }
    }

    private final class SessionDetailFragmentSubcomponentImpl implements SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent {
      private Provider<RecyclerView.RecycledViewPool> providesTagViewPoolProvider;

      private SessionDetailFragmentSubcomponentImpl(
          SessionViewPoolModule sessionViewPoolModuleParam, SessionDetailFragment arg0) {

        initialize(sessionViewPoolModuleParam, arg0);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final SessionViewPoolModule sessionViewPoolModuleParam,
          final SessionDetailFragment arg0) {
        this.providesTagViewPoolProvider = DoubleCheck.provider(SessionViewPoolModule_ProvidesTagViewPoolFactory.create(sessionViewPoolModuleParam));
      }

      @Override
      public void inject(SessionDetailFragment arg0) {
        injectSessionDetailFragment(arg0);}

      @CanIgnoreReturnValue
      private SessionDetailFragment injectSessionDetailFragment(SessionDetailFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SessionDetailFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        SessionDetailFragment_MembersInjector.injectSnackbarMessageManager(instance, DaggerAppComponent.this.snackbarMessageManagerProvider.get());
        SessionDetailFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        SessionDetailFragment_MembersInjector.injectTagRecycledViewPool(instance, providesTagViewPoolProvider.get());
        SessionDetailFragment_MembersInjector.injectIsMapEnabled(instance, DaggerAppComponent.this.getMapFeatureEnabledFlagBoolean());
        return instance;
      }
    }

    private final class SettingsFragmentSubcomponentFactory implements SettingsModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent.Factory {
      @Override
      public SettingsModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent create(
          SettingsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SettingsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SettingsFragmentSubcomponentImpl implements SettingsModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent {
      private SettingsFragmentSubcomponentImpl(SettingsFragment arg0) {

      }

      @Override
      public void inject(SettingsFragment arg0) {
        injectSettingsFragment(arg0);}

      @CanIgnoreReturnValue
      private SettingsFragment injectSettingsFragment(SettingsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SettingsFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class ThemeSettingDialogFragmentSubcomponentFactory implements SettingsModule_ContributeThemeSettingFragment$mobile_debug.ThemeSettingDialogFragmentSubcomponent.Factory {
      @Override
      public SettingsModule_ContributeThemeSettingFragment$mobile_debug.ThemeSettingDialogFragmentSubcomponent create(
          ThemeSettingDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ThemeSettingDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ThemeSettingDialogFragmentSubcomponentImpl implements SettingsModule_ContributeThemeSettingFragment$mobile_debug.ThemeSettingDialogFragmentSubcomponent {
      private ThemeSettingDialogFragmentSubcomponentImpl(ThemeSettingDialogFragment arg0) {

      }

      @Override
      public void inject(ThemeSettingDialogFragment arg0) {
        injectThemeSettingDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private ThemeSettingDialogFragment injectThemeSettingDialogFragment(
          ThemeSettingDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        ThemeSettingDialogFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SpeakerFragmentSubcomponentFactory implements SpeakerModule_ContributeSpeakerFragment$mobile_debug.SpeakerFragmentSubcomponent.Factory {
      @Override
      public SpeakerModule_ContributeSpeakerFragment$mobile_debug.SpeakerFragmentSubcomponent create(
          SpeakerFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SpeakerFragmentSubcomponentImpl(new SessionViewPoolModule(), arg0);
      }
    }

    private final class SpeakerFragmentSubcomponentImpl implements SpeakerModule_ContributeSpeakerFragment$mobile_debug.SpeakerFragmentSubcomponent {
      private Provider<RecyclerView.RecycledViewPool> providesTagViewPoolProvider;

      private SpeakerFragmentSubcomponentImpl(SessionViewPoolModule sessionViewPoolModuleParam,
          SpeakerFragment arg0) {

        initialize(sessionViewPoolModuleParam, arg0);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final SessionViewPoolModule sessionViewPoolModuleParam,
          final SpeakerFragment arg0) {
        this.providesTagViewPoolProvider = DoubleCheck.provider(SessionViewPoolModule_ProvidesTagViewPoolFactory.create(sessionViewPoolModuleParam));
      }

      @Override
      public void inject(SpeakerFragment arg0) {
        injectSpeakerFragment(arg0);}

      @CanIgnoreReturnValue
      private SpeakerFragment injectSpeakerFragment(SpeakerFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SpeakerFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        SpeakerFragment_MembersInjector.injectSnackbarMessageManager(instance, DaggerAppComponent.this.snackbarMessageManagerProvider.get());
        SpeakerFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        SpeakerFragment_MembersInjector.injectTagRecycledViewPool(instance, providesTagViewPoolProvider.get());
        return instance;
      }
    }

    private final class RemoveReservationDialogFragmentSubcomponentFactory implements ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent.Factory {
      @Override
      public ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent create(
          RemoveReservationDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RemoveReservationDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RemoveReservationDialogFragmentSubcomponentImpl implements ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent {
      private RemoveReservationDialogFragmentSubcomponentImpl(
          RemoveReservationDialogFragment arg0) {

      }

      @Override
      public void inject(RemoveReservationDialogFragment arg0) {
        injectRemoveReservationDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private RemoveReservationDialogFragment injectRemoveReservationDialogFragment(
          RemoveReservationDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        RemoveReservationDialogFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SwapReservationDialogFragmentSubcomponentFactory implements ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent.Factory {
      @Override
      public ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent create(
          SwapReservationDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SwapReservationDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SwapReservationDialogFragmentSubcomponentImpl implements ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent {
      private SwapReservationDialogFragmentSubcomponentImpl(SwapReservationDialogFragment arg0) {

      }

      private SwapActionUseCase getSwapActionUseCase() {
        return new SwapActionUseCase(DaggerAppComponent.this.provideSessionAndUserEventRepositoryProvider.get());}

      @Override
      public void inject(SwapReservationDialogFragment arg0) {
        injectSwapReservationDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private SwapReservationDialogFragment injectSwapReservationDialogFragment(
          SwapReservationDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SwapReservationDialogFragment_MembersInjector.injectSwapActionUseCase(instance, getSwapActionUseCase());
        return instance;
      }
    }

    private final class SessionFeedbackFragmentSubcomponentFactory implements SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent.Factory {
      @Override
      public SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent create(
          SessionFeedbackFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SessionFeedbackFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SessionFeedbackFragmentSubcomponentImpl implements SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent {
      private SessionFeedbackFragmentSubcomponentImpl(SessionFeedbackFragment arg0) {

      }

      @Override
      public void inject(SessionFeedbackFragment arg0) {
        injectSessionFeedbackFragment(arg0);}

      @CanIgnoreReturnValue
      private SessionFeedbackFragment injectSessionFeedbackFragment(
          SessionFeedbackFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SessionFeedbackFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SignInDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent create(
          SignInDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SignInDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SignInDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent {
      private SignInDialogFragmentSubcomponentImpl(SignInDialogFragment arg0) {

      }

      @Override
      public void inject(SignInDialogFragment arg0) {
        injectSignInDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private SignInDialogFragment injectSignInDialogFragment(SignInDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SignInDialogFragment_MembersInjector.injectSignInHandler(instance, SignInModule_ProvideSignInHandlerFactory.provideSignInHandler(DaggerAppComponent.this.signInModule));
        SignInDialogFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SignOutDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent create(
          SignOutDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SignOutDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SignOutDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent {
      private SignOutDialogFragmentSubcomponentImpl(SignOutDialogFragment arg0) {

      }

      @Override
      public void inject(SignOutDialogFragment arg0) {
        injectSignOutDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private SignOutDialogFragment injectSignOutDialogFragment(SignOutDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SignOutDialogFragment_MembersInjector.injectSignInHandler(instance, SignInModule_ProvideSignInHandlerFactory.provideSignInHandler(DaggerAppComponent.this.signInModule));
        SignOutDialogFragment_MembersInjector.injectViewModelFactory(instance, MainActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class NotificationsPreferenceDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent create(
          NotificationsPreferenceDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new NotificationsPreferenceDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class NotificationsPreferenceDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent {
      private NotificationsPreferenceDialogFragmentSubcomponentImpl(
          NotificationsPreferenceDialogFragment arg0) {

      }

      private NotificationsPrefShownActionUseCase getNotificationsPrefShownActionUseCase() {
        return new NotificationsPrefShownActionUseCase(DaggerAppComponent.this.providesPreferenceStorageProvider.get());}

      @Override
      public void inject(NotificationsPreferenceDialogFragment arg0) {
        injectNotificationsPreferenceDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private NotificationsPreferenceDialogFragment injectNotificationsPreferenceDialogFragment(
          NotificationsPreferenceDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        NotificationsPreferenceDialogFragment_MembersInjector.injectNotificationsPrefSaveActionUseCase(instance, MainActivitySubcomponentImpl.this.getNotificationsPrefSaveActionUseCase());
        NotificationsPreferenceDialogFragment_MembersInjector.injectNotificationsPrefShownActionUseCase(instance, getNotificationsPrefShownActionUseCase());
        return instance;
      }
    }
  }

  private final class SessionDetailActivitySubcomponentFactory implements ActivityBindingModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent create(
        SessionDetailActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SessionDetailActivitySubcomponentImpl(arg0);
    }
  }

  private final class SessionDetailActivitySubcomponentImpl implements ActivityBindingModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent {
    private Provider<SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent.Factory> sessionDetailFragmentSubcomponentFactoryProvider;

    private Provider<SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent.Factory> sessionFeedbackFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory> signInDialogFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory> signOutDialogFragmentSubcomponentFactoryProvider;

    private Provider<SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory> notificationsPreferenceDialogFragmentSubcomponentFactoryProvider;

    private Provider<ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent.Factory> removeReservationDialogFragmentSubcomponentFactoryProvider;

    private Provider<ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent.Factory> swapReservationDialogFragmentSubcomponentFactoryProvider;

    private Provider<LoadUserSessionUseCase> loadUserSessionUseCaseProvider;

    private Provider<LoadUserSessionsUseCase> loadUserSessionsUseCaseProvider;

    private Provider<StarEventAndNotifyUseCase> starEventAndNotifyUseCaseProvider;

    private Provider<ReservationActionUseCase> reservationActionUseCaseProvider;

    private Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider;

    private Provider<SessionDetailViewModel> sessionDetailViewModelProvider;

    private Provider<FeedbackUseCase> feedbackUseCaseProvider;

    private Provider<SessionFeedbackViewModel> sessionFeedbackViewModelProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<RemoveReservationViewModel> removeReservationViewModelProvider;

    private Provider<StopSnackbarActionUseCase> stopSnackbarActionUseCaseProvider;

    private Provider<SnackbarPreferenceViewModel> snackbarPreferenceViewModelProvider;

    private SessionDetailActivitySubcomponentImpl(SessionDetailActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(15).put(LauncherActivity.class, (Provider) DaggerAppComponent.this.launcherActivitySubcomponentFactoryProvider).put(OnboardingActivity.class, (Provider) DaggerAppComponent.this.onboardingActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(SessionDetailActivity.class, (Provider) DaggerAppComponent.this.sessionDetailActivitySubcomponentFactoryProvider).put(AlarmBroadcastReceiver.class, (Provider) DaggerAppComponent.this.alarmBroadcastReceiverSubcomponentFactoryProvider).put(CancelNotificationBroadcastReceiver.class, (Provider) DaggerAppComponent.this.cancelNotificationBroadcastReceiverSubcomponentFactoryProvider).put(IoschedFirebaseMessagingService.class, (Provider) DaggerAppComponent.this.ioschedFirebaseMessagingServiceSubcomponentFactoryProvider).put(ConferenceDataService.class, (Provider) DaggerAppComponent.this.conferenceDataServiceSubcomponentFactoryProvider).put(SessionDetailFragment.class, (Provider) sessionDetailFragmentSubcomponentFactoryProvider).put(SessionFeedbackFragment.class, (Provider) sessionFeedbackFragmentSubcomponentFactoryProvider).put(SignInDialogFragment.class, (Provider) signInDialogFragmentSubcomponentFactoryProvider).put(SignOutDialogFragment.class, (Provider) signOutDialogFragmentSubcomponentFactoryProvider).put(NotificationsPreferenceDialogFragment.class, (Provider) notificationsPreferenceDialogFragmentSubcomponentFactoryProvider).put(RemoveReservationDialogFragment.class, (Provider) removeReservationDialogFragmentSubcomponentFactoryProvider).put(SwapReservationDialogFragment.class, (Provider) swapReservationDialogFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return ImmutableMap.<Class<? extends ViewModel>, Provider<ViewModel>>builderWithExpectedSize(6).put(ThemeViewModel.class, (Provider) DaggerAppComponent.this.themeViewModelProvider).put(SessionDetailViewModel.class, (Provider) sessionDetailViewModelProvider).put(SessionFeedbackViewModel.class, (Provider) sessionFeedbackViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(RemoveReservationViewModel.class, (Provider) removeReservationViewModelProvider).put(SnackbarPreferenceViewModel.class, (Provider) snackbarPreferenceViewModelProvider).build();}

    private IOSchedViewModelFactory getIOSchedViewModelFactory() {
      return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final SessionDetailActivity arg0) {
      this.sessionDetailFragmentSubcomponentFactoryProvider = new Provider<SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent.Factory>() {
        @Override
        public SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent.Factory get(
            ) {
          return new SessionDetailFragmentSubcomponentFactory();}
      };
      this.sessionFeedbackFragmentSubcomponentFactoryProvider = new Provider<SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent.Factory>() {
        @Override
        public SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent.Factory get(
            ) {
          return new SessionFeedbackFragmentSubcomponentFactory();}
      };
      this.signInDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory get(
            ) {
          return new SignInDialogFragmentSubcomponentFactory();}
      };
      this.signOutDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory get(
            ) {
          return new SignOutDialogFragmentSubcomponentFactory();}
      };
      this.notificationsPreferenceDialogFragmentSubcomponentFactoryProvider = new Provider<SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory>() {
        @Override
        public SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory get(
            ) {
          return new NotificationsPreferenceDialogFragmentSubcomponentFactory();}
      };
      this.removeReservationDialogFragmentSubcomponentFactoryProvider = new Provider<ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent.Factory>() {
        @Override
        public ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent.Factory get(
            ) {
          return new RemoveReservationDialogFragmentSubcomponentFactory();}
      };
      this.swapReservationDialogFragmentSubcomponentFactoryProvider = new Provider<ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent.Factory>() {
        @Override
        public ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent.Factory get(
            ) {
          return new SwapReservationDialogFragmentSubcomponentFactory();}
      };
      this.loadUserSessionUseCaseProvider = LoadUserSessionUseCase_Factory.create(DaggerAppComponent.this.defaultSessionAndUserEventRepositoryProvider);
      this.loadUserSessionsUseCaseProvider = LoadUserSessionsUseCase_Factory.create(DaggerAppComponent.this.defaultSessionAndUserEventRepositoryProvider);
      this.starEventAndNotifyUseCaseProvider = StarEventAndNotifyUseCase_Factory.create(DaggerAppComponent.this.provideSessionAndUserEventRepositoryProvider, DaggerAppComponent.this.starReserveNotificationAlarmUpdaterProvider);
      this.reservationActionUseCaseProvider = ReservationActionUseCase_Factory.create(DaggerAppComponent.this.provideSessionAndUserEventRepositoryProvider, DaggerAppComponent.this.starReserveNotificationAlarmUpdaterProvider);
      this.getTimeZoneUseCaseProvider = GetTimeZoneUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.sessionDetailViewModelProvider = SessionDetailViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider, loadUserSessionUseCaseProvider, loadUserSessionsUseCaseProvider, starEventAndNotifyUseCaseProvider, reservationActionUseCaseProvider, getTimeZoneUseCaseProvider, DaggerAppComponent.this.snackbarMessageManagerProvider, DaggerAppComponent.this.provideTimeProvider, DaggerAppComponent.this.networkUtilsProvider, DaggerAppComponent.this.providesAnalyticsHelperProvider);
      this.feedbackUseCaseProvider = FeedbackUseCase_Factory.create(DaggerAppComponent.this.provideFeedbackEndpointProvider, DaggerAppComponent.this.provideSessionAndUserEventRepositoryProvider);
      this.sessionFeedbackViewModelProvider = SessionFeedbackViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider, loadUserSessionUseCaseProvider, feedbackUseCaseProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider);
      this.removeReservationViewModelProvider = RemoveReservationViewModel_Factory.create(DaggerAppComponent.this.provideSignInViewModelDelegateProvider, loadUserSessionUseCaseProvider, reservationActionUseCaseProvider);
      this.stopSnackbarActionUseCaseProvider = StopSnackbarActionUseCase_Factory.create(DaggerAppComponent.this.providesPreferenceStorageProvider);
      this.snackbarPreferenceViewModelProvider = SnackbarPreferenceViewModel_Factory.create(stopSnackbarActionUseCaseProvider);
    }

    @Override
    public void inject(SessionDetailActivity arg0) {
      injectSessionDetailActivity(arg0);}

    @CanIgnoreReturnValue
    private SessionDetailActivity injectSessionDetailActivity(SessionDetailActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      SessionDetailActivity_MembersInjector.injectSnackbarMessageManager(instance, DaggerAppComponent.this.snackbarMessageManagerProvider.get());
      SessionDetailActivity_MembersInjector.injectViewModelFactory(instance, getIOSchedViewModelFactory());
      return instance;
    }

    private final class SessionDetailFragmentSubcomponentFactory implements SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent.Factory {
      @Override
      public SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent create(
          SessionDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SessionDetailFragmentSubcomponentImpl(new SessionViewPoolModule(), arg0);
      }
    }

    private final class SessionDetailFragmentSubcomponentImpl implements SessionDetailModule_ContributeSessionDetailFragment$mobile_debug.SessionDetailFragmentSubcomponent {
      private Provider<RecyclerView.RecycledViewPool> providesTagViewPoolProvider;

      private SessionDetailFragmentSubcomponentImpl(
          SessionViewPoolModule sessionViewPoolModuleParam, SessionDetailFragment arg0) {

        initialize(sessionViewPoolModuleParam, arg0);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final SessionViewPoolModule sessionViewPoolModuleParam,
          final SessionDetailFragment arg0) {
        this.providesTagViewPoolProvider = DoubleCheck.provider(SessionViewPoolModule_ProvidesTagViewPoolFactory.create(sessionViewPoolModuleParam));
      }

      @Override
      public void inject(SessionDetailFragment arg0) {
        injectSessionDetailFragment(arg0);}

      @CanIgnoreReturnValue
      private SessionDetailFragment injectSessionDetailFragment(SessionDetailFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, SessionDetailActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SessionDetailFragment_MembersInjector.injectViewModelFactory(instance, SessionDetailActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        SessionDetailFragment_MembersInjector.injectSnackbarMessageManager(instance, DaggerAppComponent.this.snackbarMessageManagerProvider.get());
        SessionDetailFragment_MembersInjector.injectAnalyticsHelper(instance, DaggerAppComponent.this.providesAnalyticsHelperProvider.get());
        SessionDetailFragment_MembersInjector.injectTagRecycledViewPool(instance, providesTagViewPoolProvider.get());
        SessionDetailFragment_MembersInjector.injectIsMapEnabled(instance, DaggerAppComponent.this.getMapFeatureEnabledFlagBoolean());
        return instance;
      }
    }

    private final class SessionFeedbackFragmentSubcomponentFactory implements SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent.Factory {
      @Override
      public SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent create(
          SessionFeedbackFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SessionFeedbackFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SessionFeedbackFragmentSubcomponentImpl implements SessionFeedbackModule_ContributeSessionFeedbackFragment$mobile_debug.SessionFeedbackFragmentSubcomponent {
      private SessionFeedbackFragmentSubcomponentImpl(SessionFeedbackFragment arg0) {

      }

      @Override
      public void inject(SessionFeedbackFragment arg0) {
        injectSessionFeedbackFragment(arg0);}

      @CanIgnoreReturnValue
      private SessionFeedbackFragment injectSessionFeedbackFragment(
          SessionFeedbackFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, SessionDetailActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SessionFeedbackFragment_MembersInjector.injectViewModelFactory(instance, SessionDetailActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SignInDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent create(
          SignInDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SignInDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SignInDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeSignInDialogFragment$mobile_debug.SignInDialogFragmentSubcomponent {
      private SignInDialogFragmentSubcomponentImpl(SignInDialogFragment arg0) {

      }

      @Override
      public void inject(SignInDialogFragment arg0) {
        injectSignInDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private SignInDialogFragment injectSignInDialogFragment(SignInDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, SessionDetailActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SignInDialogFragment_MembersInjector.injectSignInHandler(instance, SignInModule_ProvideSignInHandlerFactory.provideSignInHandler(DaggerAppComponent.this.signInModule));
        SignInDialogFragment_MembersInjector.injectViewModelFactory(instance, SessionDetailActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SignOutDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent create(
          SignOutDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SignOutDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SignOutDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeSignOutDialogFragment$mobile_debug.SignOutDialogFragmentSubcomponent {
      private SignOutDialogFragmentSubcomponentImpl(SignOutDialogFragment arg0) {

      }

      @Override
      public void inject(SignOutDialogFragment arg0) {
        injectSignOutDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private SignOutDialogFragment injectSignOutDialogFragment(SignOutDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, SessionDetailActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SignOutDialogFragment_MembersInjector.injectSignInHandler(instance, SignInModule_ProvideSignInHandlerFactory.provideSignInHandler(DaggerAppComponent.this.signInModule));
        SignOutDialogFragment_MembersInjector.injectViewModelFactory(instance, SessionDetailActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class NotificationsPreferenceDialogFragmentSubcomponentFactory implements SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent.Factory {
      @Override
      public SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent create(
          NotificationsPreferenceDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new NotificationsPreferenceDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class NotificationsPreferenceDialogFragmentSubcomponentImpl implements SignInDialogModule_ContributeNotificationsPreferenceDialogFragment$mobile_debug.NotificationsPreferenceDialogFragmentSubcomponent {
      private NotificationsPreferenceDialogFragmentSubcomponentImpl(
          NotificationsPreferenceDialogFragment arg0) {

      }

      private NotificationsPrefSaveActionUseCase getNotificationsPrefSaveActionUseCase() {
        return new NotificationsPrefSaveActionUseCase(DaggerAppComponent.this.providesPreferenceStorageProvider.get());}

      private NotificationsPrefShownActionUseCase getNotificationsPrefShownActionUseCase() {
        return new NotificationsPrefShownActionUseCase(DaggerAppComponent.this.providesPreferenceStorageProvider.get());}

      @Override
      public void inject(NotificationsPreferenceDialogFragment arg0) {
        injectNotificationsPreferenceDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private NotificationsPreferenceDialogFragment injectNotificationsPreferenceDialogFragment(
          NotificationsPreferenceDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, SessionDetailActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        NotificationsPreferenceDialogFragment_MembersInjector.injectNotificationsPrefSaveActionUseCase(instance, getNotificationsPrefSaveActionUseCase());
        NotificationsPreferenceDialogFragment_MembersInjector.injectNotificationsPrefShownActionUseCase(instance, getNotificationsPrefShownActionUseCase());
        return instance;
      }
    }

    private final class RemoveReservationDialogFragmentSubcomponentFactory implements ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent.Factory {
      @Override
      public ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent create(
          RemoveReservationDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RemoveReservationDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RemoveReservationDialogFragmentSubcomponentImpl implements ReservationModule_ContributeRemoveReservationDialogFragment$mobile_debug.RemoveReservationDialogFragmentSubcomponent {
      private RemoveReservationDialogFragmentSubcomponentImpl(
          RemoveReservationDialogFragment arg0) {

      }

      @Override
      public void inject(RemoveReservationDialogFragment arg0) {
        injectRemoveReservationDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private RemoveReservationDialogFragment injectRemoveReservationDialogFragment(
          RemoveReservationDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, SessionDetailActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        RemoveReservationDialogFragment_MembersInjector.injectViewModelFactory(instance, SessionDetailActivitySubcomponentImpl.this.getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class SwapReservationDialogFragmentSubcomponentFactory implements ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent.Factory {
      @Override
      public ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent create(
          SwapReservationDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SwapReservationDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SwapReservationDialogFragmentSubcomponentImpl implements ReservationModule_ContributeSwapReservationDialogFragment$mobile_debug.SwapReservationDialogFragmentSubcomponent {
      private SwapReservationDialogFragmentSubcomponentImpl(SwapReservationDialogFragment arg0) {

      }

      private SwapActionUseCase getSwapActionUseCase() {
        return new SwapActionUseCase(DaggerAppComponent.this.provideSessionAndUserEventRepositoryProvider.get());}

      @Override
      public void inject(SwapReservationDialogFragment arg0) {
        injectSwapReservationDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private SwapReservationDialogFragment injectSwapReservationDialogFragment(
          SwapReservationDialogFragment instance) {
        DaggerAppCompatDialogFragment_MembersInjector.injectAndroidInjector(instance, SessionDetailActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SwapReservationDialogFragment_MembersInjector.injectSwapActionUseCase(instance, getSwapActionUseCase());
        return instance;
      }
    }
  }

  private final class AlarmBroadcastReceiverSubcomponentFactory implements BroadcastReceiverBindingModule_AlarmBroadcastReceiver$shared_debug.AlarmBroadcastReceiverSubcomponent.Factory {
    @Override
    public BroadcastReceiverBindingModule_AlarmBroadcastReceiver$shared_debug.AlarmBroadcastReceiverSubcomponent create(
        AlarmBroadcastReceiver arg0) {
      Preconditions.checkNotNull(arg0);
      return new AlarmBroadcastReceiverSubcomponentImpl(arg0);
    }
  }

  private final class AlarmBroadcastReceiverSubcomponentImpl implements BroadcastReceiverBindingModule_AlarmBroadcastReceiver$shared_debug.AlarmBroadcastReceiverSubcomponent {
    private AlarmBroadcastReceiverSubcomponentImpl(AlarmBroadcastReceiver arg0) {

    }

    private LoadUserSessionSyncUseCase getLoadUserSessionSyncUseCase() {
      return new LoadUserSessionSyncUseCase(DaggerAppComponent.this.defaultSessionAndUserEventRepositoryProvider.get());}

    private LoadSessionSyncUseCase getLoadSessionSyncUseCase() {
      return new LoadSessionSyncUseCase(DaggerAppComponent.this.provideSessionRepositoryProvider.get());}

    @Override
    public void inject(AlarmBroadcastReceiver arg0) {
      injectAlarmBroadcastReceiver(arg0);}

    @CanIgnoreReturnValue
    private AlarmBroadcastReceiver injectAlarmBroadcastReceiver(AlarmBroadcastReceiver instance) {
      AlarmBroadcastReceiver_MembersInjector.injectSharedPreferencesStorage(instance, DaggerAppComponent.this.sharedPreferenceStorageProvider.get());
      AlarmBroadcastReceiver_MembersInjector.injectLoadUserSession(instance, getLoadUserSessionSyncUseCase());
      AlarmBroadcastReceiver_MembersInjector.injectLoadSession(instance, getLoadSessionSyncUseCase());
      AlarmBroadcastReceiver_MembersInjector.injectAlarmManager(instance, DaggerAppComponent.this.getSessionAlarmManager());
      AlarmBroadcastReceiver_MembersInjector.injectAuthIdDataSource(instance, DaggerAppComponent.this.providesAuthIdDataSourceProvider.get());
      return instance;
    }
  }

  private final class CancelNotificationBroadcastReceiverSubcomponentFactory implements BroadcastReceiverBindingModule_CancelNotificationBroadcastReceiver$shared_debug.CancelNotificationBroadcastReceiverSubcomponent.Factory {
    @Override
    public BroadcastReceiverBindingModule_CancelNotificationBroadcastReceiver$shared_debug.CancelNotificationBroadcastReceiverSubcomponent create(
        CancelNotificationBroadcastReceiver arg0) {
      Preconditions.checkNotNull(arg0);
      return new CancelNotificationBroadcastReceiverSubcomponentImpl(arg0);
    }
  }

  private final class CancelNotificationBroadcastReceiverSubcomponentImpl implements BroadcastReceiverBindingModule_CancelNotificationBroadcastReceiver$shared_debug.CancelNotificationBroadcastReceiverSubcomponent {
    private CancelNotificationBroadcastReceiverSubcomponentImpl(
        CancelNotificationBroadcastReceiver arg0) {

    }

    @Override
    public void inject(CancelNotificationBroadcastReceiver arg0) {
      injectCancelNotificationBroadcastReceiver(arg0);}

    @CanIgnoreReturnValue
    private CancelNotificationBroadcastReceiver injectCancelNotificationBroadcastReceiver(
        CancelNotificationBroadcastReceiver instance) {
      CancelNotificationBroadcastReceiver_MembersInjector.injectContext(instance, DaggerAppComponent.this.getContext());
      return instance;
    }
  }

  private final class IoschedFirebaseMessagingServiceSubcomponentFactory implements ServiceBindingModule_IoschedMessagingService$shared_debug.IoschedFirebaseMessagingServiceSubcomponent.Factory {
    @Override
    public ServiceBindingModule_IoschedMessagingService$shared_debug.IoschedFirebaseMessagingServiceSubcomponent create(
        IoschedFirebaseMessagingService arg0) {
      Preconditions.checkNotNull(arg0);
      return new IoschedFirebaseMessagingServiceSubcomponentImpl(arg0);
    }
  }

  private final class IoschedFirebaseMessagingServiceSubcomponentImpl implements ServiceBindingModule_IoschedMessagingService$shared_debug.IoschedFirebaseMessagingServiceSubcomponent {
    private IoschedFirebaseMessagingServiceSubcomponentImpl(IoschedFirebaseMessagingService arg0) {

    }

    @Override
    public void inject(IoschedFirebaseMessagingService arg0) {
    }
  }

  private final class ConferenceDataServiceSubcomponentFactory implements ServiceBindingModule_ProvideConferenceDataService$shared_debug.ConferenceDataServiceSubcomponent.Factory {
    @Override
    public ServiceBindingModule_ProvideConferenceDataService$shared_debug.ConferenceDataServiceSubcomponent create(
        ConferenceDataService arg0) {
      Preconditions.checkNotNull(arg0);
      return new ConferenceDataServiceSubcomponentImpl(arg0);
    }
  }

  private final class ConferenceDataServiceSubcomponentImpl implements ServiceBindingModule_ProvideConferenceDataService$shared_debug.ConferenceDataServiceSubcomponent {
    private ConferenceDataServiceSubcomponentImpl(ConferenceDataService arg0) {

    }

    private RefreshConferenceDataUseCase getRefreshConferenceDataUseCase() {
      return new RefreshConferenceDataUseCase(DaggerAppComponent.this.provideConferenceDataRepositoryProvider.get());}

    @Override
    public void inject(ConferenceDataService arg0) {
      injectConferenceDataService(arg0);}

    @CanIgnoreReturnValue
    private ConferenceDataService injectConferenceDataService(ConferenceDataService instance) {
      ConferenceDataService_MembersInjector.injectRefreshEventDataUseCase(instance, getRefreshConferenceDataUseCase());
      return instance;
    }
  }
}
