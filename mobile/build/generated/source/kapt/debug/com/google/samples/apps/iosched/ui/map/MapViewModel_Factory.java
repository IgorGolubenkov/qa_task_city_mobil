// Generated by Dagger (https://dagger.dev).
package com.google.samples.apps.iosched.ui.map;

import com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper;
import com.google.samples.apps.iosched.shared.domain.prefs.MyLocationOptedInUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.OptIntoMyLocationUseCase;
import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MapViewModel_Factory implements Factory<MapViewModel> {
  private final Provider<LoadGeoJsonFeaturesUseCase> loadGeoJsonFeaturesUseCaseProvider;

  private final Provider<AnalyticsHelper> analyticsHelperProvider;

  private final Provider<SignInViewModelDelegate> signInViewModelDelegateProvider;

  private final Provider<OptIntoMyLocationUseCase> optIntoMyLocationUseCaseProvider;

  private final Provider<MyLocationOptedInUseCase> myLocationOptedInUseCaseProvider;

  public MapViewModel_Factory(
      Provider<LoadGeoJsonFeaturesUseCase> loadGeoJsonFeaturesUseCaseProvider,
      Provider<AnalyticsHelper> analyticsHelperProvider,
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<OptIntoMyLocationUseCase> optIntoMyLocationUseCaseProvider,
      Provider<MyLocationOptedInUseCase> myLocationOptedInUseCaseProvider) {
    this.loadGeoJsonFeaturesUseCaseProvider = loadGeoJsonFeaturesUseCaseProvider;
    this.analyticsHelperProvider = analyticsHelperProvider;
    this.signInViewModelDelegateProvider = signInViewModelDelegateProvider;
    this.optIntoMyLocationUseCaseProvider = optIntoMyLocationUseCaseProvider;
    this.myLocationOptedInUseCaseProvider = myLocationOptedInUseCaseProvider;
  }

  @Override
  public MapViewModel get() {
    return new MapViewModel(loadGeoJsonFeaturesUseCaseProvider.get(), analyticsHelperProvider.get(), signInViewModelDelegateProvider.get(), optIntoMyLocationUseCaseProvider.get(), myLocationOptedInUseCaseProvider.get());
  }

  public static MapViewModel_Factory create(
      Provider<LoadGeoJsonFeaturesUseCase> loadGeoJsonFeaturesUseCaseProvider,
      Provider<AnalyticsHelper> analyticsHelperProvider,
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<OptIntoMyLocationUseCase> optIntoMyLocationUseCaseProvider,
      Provider<MyLocationOptedInUseCase> myLocationOptedInUseCaseProvider) {
    return new MapViewModel_Factory(loadGeoJsonFeaturesUseCaseProvider, analyticsHelperProvider, signInViewModelDelegateProvider, optIntoMyLocationUseCaseProvider, myLocationOptedInUseCaseProvider);
  }

  public static MapViewModel newInstance(LoadGeoJsonFeaturesUseCase loadGeoJsonFeaturesUseCase,
      AnalyticsHelper analyticsHelper, SignInViewModelDelegate signInViewModelDelegate,
      OptIntoMyLocationUseCase optIntoMyLocationUseCase,
      MyLocationOptedInUseCase myLocationOptedInUseCase) {
    return new MapViewModel(loadGeoJsonFeaturesUseCase, analyticsHelper, signInViewModelDelegate, optIntoMyLocationUseCase, myLocationOptedInUseCase);
  }
}
