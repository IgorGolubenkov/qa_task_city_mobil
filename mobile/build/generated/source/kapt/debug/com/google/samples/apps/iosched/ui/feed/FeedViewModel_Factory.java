// Generated by Dagger (https://dagger.dev).
package com.google.samples.apps.iosched.ui.feed;

import com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper;
import com.google.samples.apps.iosched.shared.domain.feed.LoadAnnouncementsUseCase;
import com.google.samples.apps.iosched.shared.domain.feed.LoadCurrentMomentUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadFilteredUserSessionsUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.GetTimeZoneUseCase;
import com.google.samples.apps.iosched.shared.time.TimeProvider;
import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate;
import com.google.samples.apps.iosched.ui.theme.ThemedActivityDelegate;
import com.google.samples.apps.iosched.util.ConferenceStateLiveData;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FeedViewModel_Factory implements Factory<FeedViewModel> {
  private final Provider<LoadCurrentMomentUseCase> loadCurrentMomentUseCaseProvider;

  private final Provider<LoadAnnouncementsUseCase> loadAnnouncementsUseCaseProvider;

  private final Provider<LoadFilteredUserSessionsUseCase> loadFilteredUserSessionsUseCaseProvider;

  private final Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider;

  private final Provider<ConferenceStateLiveData> conferenceStateLiveDataProvider;

  private final Provider<TimeProvider> timeProvider;

  private final Provider<AnalyticsHelper> analyticsHelperProvider;

  private final Provider<SignInViewModelDelegate> signInViewModelDelegateProvider;

  private final Provider<ThemedActivityDelegate> themedActivityDelegateProvider;

  public FeedViewModel_Factory(Provider<LoadCurrentMomentUseCase> loadCurrentMomentUseCaseProvider,
      Provider<LoadAnnouncementsUseCase> loadAnnouncementsUseCaseProvider,
      Provider<LoadFilteredUserSessionsUseCase> loadFilteredUserSessionsUseCaseProvider,
      Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider,
      Provider<ConferenceStateLiveData> conferenceStateLiveDataProvider,
      Provider<TimeProvider> timeProvider, Provider<AnalyticsHelper> analyticsHelperProvider,
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<ThemedActivityDelegate> themedActivityDelegateProvider) {
    this.loadCurrentMomentUseCaseProvider = loadCurrentMomentUseCaseProvider;
    this.loadAnnouncementsUseCaseProvider = loadAnnouncementsUseCaseProvider;
    this.loadFilteredUserSessionsUseCaseProvider = loadFilteredUserSessionsUseCaseProvider;
    this.getTimeZoneUseCaseProvider = getTimeZoneUseCaseProvider;
    this.conferenceStateLiveDataProvider = conferenceStateLiveDataProvider;
    this.timeProvider = timeProvider;
    this.analyticsHelperProvider = analyticsHelperProvider;
    this.signInViewModelDelegateProvider = signInViewModelDelegateProvider;
    this.themedActivityDelegateProvider = themedActivityDelegateProvider;
  }

  @Override
  public FeedViewModel get() {
    return new FeedViewModel(loadCurrentMomentUseCaseProvider.get(), loadAnnouncementsUseCaseProvider.get(), loadFilteredUserSessionsUseCaseProvider.get(), getTimeZoneUseCaseProvider.get(), conferenceStateLiveDataProvider.get(), timeProvider.get(), analyticsHelperProvider.get(), signInViewModelDelegateProvider.get(), themedActivityDelegateProvider.get());
  }

  public static FeedViewModel_Factory create(
      Provider<LoadCurrentMomentUseCase> loadCurrentMomentUseCaseProvider,
      Provider<LoadAnnouncementsUseCase> loadAnnouncementsUseCaseProvider,
      Provider<LoadFilteredUserSessionsUseCase> loadFilteredUserSessionsUseCaseProvider,
      Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider,
      Provider<ConferenceStateLiveData> conferenceStateLiveDataProvider,
      Provider<TimeProvider> timeProvider, Provider<AnalyticsHelper> analyticsHelperProvider,
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<ThemedActivityDelegate> themedActivityDelegateProvider) {
    return new FeedViewModel_Factory(loadCurrentMomentUseCaseProvider, loadAnnouncementsUseCaseProvider, loadFilteredUserSessionsUseCaseProvider, getTimeZoneUseCaseProvider, conferenceStateLiveDataProvider, timeProvider, analyticsHelperProvider, signInViewModelDelegateProvider, themedActivityDelegateProvider);
  }

  public static FeedViewModel newInstance(LoadCurrentMomentUseCase loadCurrentMomentUseCase,
      LoadAnnouncementsUseCase loadAnnouncementsUseCase,
      LoadFilteredUserSessionsUseCase loadFilteredUserSessionsUseCase,
      GetTimeZoneUseCase getTimeZoneUseCase, ConferenceStateLiveData conferenceStateLiveData,
      TimeProvider timeProvider, AnalyticsHelper analyticsHelper,
      SignInViewModelDelegate signInViewModelDelegate,
      ThemedActivityDelegate themedActivityDelegate) {
    return new FeedViewModel(loadCurrentMomentUseCase, loadAnnouncementsUseCase, loadFilteredUserSessionsUseCase, getTimeZoneUseCase, conferenceStateLiveData, timeProvider, analyticsHelper, signInViewModelDelegate, themedActivityDelegate);
  }
}
