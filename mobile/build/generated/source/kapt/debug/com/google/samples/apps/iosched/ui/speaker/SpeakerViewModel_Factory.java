// Generated by Dagger (https://dagger.dev).
package com.google.samples.apps.iosched.ui.speaker;

import com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadUserSessionsUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.GetTimeZoneUseCase;
import com.google.samples.apps.iosched.shared.domain.speakers.LoadSpeakerUseCase;
import com.google.samples.apps.iosched.ui.sessioncommon.EventActionsViewModelDelegate;
import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SpeakerViewModel_Factory implements Factory<SpeakerViewModel> {
  private final Provider<LoadSpeakerUseCase> loadSpeakerUseCaseProvider;

  private final Provider<LoadUserSessionsUseCase> loadSpeakerSessionsUseCaseProvider;

  private final Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider;

  private final Provider<SignInViewModelDelegate> signInViewModelDelegateProvider;

  private final Provider<EventActionsViewModelDelegate> eventActionsViewModelDelegateProvider;

  private final Provider<AnalyticsHelper> analyticsHelperProvider;

  public SpeakerViewModel_Factory(Provider<LoadSpeakerUseCase> loadSpeakerUseCaseProvider,
      Provider<LoadUserSessionsUseCase> loadSpeakerSessionsUseCaseProvider,
      Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider,
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<EventActionsViewModelDelegate> eventActionsViewModelDelegateProvider,
      Provider<AnalyticsHelper> analyticsHelperProvider) {
    this.loadSpeakerUseCaseProvider = loadSpeakerUseCaseProvider;
    this.loadSpeakerSessionsUseCaseProvider = loadSpeakerSessionsUseCaseProvider;
    this.getTimeZoneUseCaseProvider = getTimeZoneUseCaseProvider;
    this.signInViewModelDelegateProvider = signInViewModelDelegateProvider;
    this.eventActionsViewModelDelegateProvider = eventActionsViewModelDelegateProvider;
    this.analyticsHelperProvider = analyticsHelperProvider;
  }

  @Override
  public SpeakerViewModel get() {
    return new SpeakerViewModel(loadSpeakerUseCaseProvider.get(), loadSpeakerSessionsUseCaseProvider.get(), getTimeZoneUseCaseProvider.get(), signInViewModelDelegateProvider.get(), eventActionsViewModelDelegateProvider.get(), analyticsHelperProvider.get());
  }

  public static SpeakerViewModel_Factory create(
      Provider<LoadSpeakerUseCase> loadSpeakerUseCaseProvider,
      Provider<LoadUserSessionsUseCase> loadSpeakerSessionsUseCaseProvider,
      Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider,
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<EventActionsViewModelDelegate> eventActionsViewModelDelegateProvider,
      Provider<AnalyticsHelper> analyticsHelperProvider) {
    return new SpeakerViewModel_Factory(loadSpeakerUseCaseProvider, loadSpeakerSessionsUseCaseProvider, getTimeZoneUseCaseProvider, signInViewModelDelegateProvider, eventActionsViewModelDelegateProvider, analyticsHelperProvider);
  }

  public static SpeakerViewModel newInstance(LoadSpeakerUseCase loadSpeakerUseCase,
      LoadUserSessionsUseCase loadSpeakerSessionsUseCase, GetTimeZoneUseCase getTimeZoneUseCase,
      SignInViewModelDelegate signInViewModelDelegate,
      EventActionsViewModelDelegate eventActionsViewModelDelegate,
      AnalyticsHelper analyticsHelper) {
    return new SpeakerViewModel(loadSpeakerUseCase, loadSpeakerSessionsUseCase, getTimeZoneUseCase, signInViewModelDelegate, eventActionsViewModelDelegate, analyticsHelper);
  }
}
