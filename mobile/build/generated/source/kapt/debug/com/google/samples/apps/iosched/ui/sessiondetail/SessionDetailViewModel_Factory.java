// Generated by Dagger (https://dagger.dev).
package com.google.samples.apps.iosched.ui.sessiondetail;

import com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadUserSessionUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadUserSessionsUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.GetTimeZoneUseCase;
import com.google.samples.apps.iosched.shared.domain.users.ReservationActionUseCase;
import com.google.samples.apps.iosched.shared.domain.users.StarEventAndNotifyUseCase;
import com.google.samples.apps.iosched.shared.time.TimeProvider;
import com.google.samples.apps.iosched.shared.util.NetworkUtils;
import com.google.samples.apps.iosched.ui.messages.SnackbarMessageManager;
import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SessionDetailViewModel_Factory implements Factory<SessionDetailViewModel> {
  private final Provider<SignInViewModelDelegate> signInViewModelDelegateProvider;

  private final Provider<LoadUserSessionUseCase> loadUserSessionUseCaseProvider;

  private final Provider<LoadUserSessionsUseCase> loadRelatedSessionUseCaseProvider;

  private final Provider<StarEventAndNotifyUseCase> starEventUseCaseProvider;

  private final Provider<ReservationActionUseCase> reservationActionUseCaseProvider;

  private final Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider;

  private final Provider<SnackbarMessageManager> snackbarMessageManagerProvider;

  private final Provider<TimeProvider> timeProvider;

  private final Provider<NetworkUtils> networkUtilsProvider;

  private final Provider<AnalyticsHelper> analyticsHelperProvider;

  public SessionDetailViewModel_Factory(
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<LoadUserSessionUseCase> loadUserSessionUseCaseProvider,
      Provider<LoadUserSessionsUseCase> loadRelatedSessionUseCaseProvider,
      Provider<StarEventAndNotifyUseCase> starEventUseCaseProvider,
      Provider<ReservationActionUseCase> reservationActionUseCaseProvider,
      Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider,
      Provider<SnackbarMessageManager> snackbarMessageManagerProvider,
      Provider<TimeProvider> timeProvider, Provider<NetworkUtils> networkUtilsProvider,
      Provider<AnalyticsHelper> analyticsHelperProvider) {
    this.signInViewModelDelegateProvider = signInViewModelDelegateProvider;
    this.loadUserSessionUseCaseProvider = loadUserSessionUseCaseProvider;
    this.loadRelatedSessionUseCaseProvider = loadRelatedSessionUseCaseProvider;
    this.starEventUseCaseProvider = starEventUseCaseProvider;
    this.reservationActionUseCaseProvider = reservationActionUseCaseProvider;
    this.getTimeZoneUseCaseProvider = getTimeZoneUseCaseProvider;
    this.snackbarMessageManagerProvider = snackbarMessageManagerProvider;
    this.timeProvider = timeProvider;
    this.networkUtilsProvider = networkUtilsProvider;
    this.analyticsHelperProvider = analyticsHelperProvider;
  }

  @Override
  public SessionDetailViewModel get() {
    return new SessionDetailViewModel(signInViewModelDelegateProvider.get(), loadUserSessionUseCaseProvider.get(), loadRelatedSessionUseCaseProvider.get(), starEventUseCaseProvider.get(), reservationActionUseCaseProvider.get(), getTimeZoneUseCaseProvider.get(), snackbarMessageManagerProvider.get(), timeProvider.get(), networkUtilsProvider.get(), analyticsHelperProvider.get());
  }

  public static SessionDetailViewModel_Factory create(
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<LoadUserSessionUseCase> loadUserSessionUseCaseProvider,
      Provider<LoadUserSessionsUseCase> loadRelatedSessionUseCaseProvider,
      Provider<StarEventAndNotifyUseCase> starEventUseCaseProvider,
      Provider<ReservationActionUseCase> reservationActionUseCaseProvider,
      Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider,
      Provider<SnackbarMessageManager> snackbarMessageManagerProvider,
      Provider<TimeProvider> timeProvider, Provider<NetworkUtils> networkUtilsProvider,
      Provider<AnalyticsHelper> analyticsHelperProvider) {
    return new SessionDetailViewModel_Factory(signInViewModelDelegateProvider, loadUserSessionUseCaseProvider, loadRelatedSessionUseCaseProvider, starEventUseCaseProvider, reservationActionUseCaseProvider, getTimeZoneUseCaseProvider, snackbarMessageManagerProvider, timeProvider, networkUtilsProvider, analyticsHelperProvider);
  }

  public static SessionDetailViewModel newInstance(SignInViewModelDelegate signInViewModelDelegate,
      LoadUserSessionUseCase loadUserSessionUseCase,
      LoadUserSessionsUseCase loadRelatedSessionUseCase, StarEventAndNotifyUseCase starEventUseCase,
      ReservationActionUseCase reservationActionUseCase, GetTimeZoneUseCase getTimeZoneUseCase,
      SnackbarMessageManager snackbarMessageManager, TimeProvider timeProvider,
      NetworkUtils networkUtils, AnalyticsHelper analyticsHelper) {
    return new SessionDetailViewModel(signInViewModelDelegate, loadUserSessionUseCase, loadRelatedSessionUseCase, starEventUseCase, reservationActionUseCase, getTimeZoneUseCase, snackbarMessageManager, timeProvider, networkUtils, analyticsHelper);
  }
}
