// Generated by Dagger (https://dagger.dev).
package com.google.samples.apps.iosched.ui.schedule;

import com.google.samples.apps.iosched.shared.analytics.AnalyticsHelper;
import com.google.samples.apps.iosched.shared.domain.RefreshConferenceDataUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.LoadSelectedFiltersUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.SaveSelectedFiltersUseCase;
import com.google.samples.apps.iosched.shared.domain.prefs.ScheduleUiHintsShownUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadFilteredUserSessionsUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.ObserveConferenceDataUseCase;
import com.google.samples.apps.iosched.shared.domain.settings.GetTimeZoneUseCase;
import com.google.samples.apps.iosched.shared.domain.users.StarEventAndNotifyUseCase;
import com.google.samples.apps.iosched.shared.fcm.TopicSubscriber;
import com.google.samples.apps.iosched.ui.messages.SnackbarMessageManager;
import com.google.samples.apps.iosched.ui.schedule.filters.LoadEventFiltersUseCase;
import com.google.samples.apps.iosched.ui.signin.SignInViewModelDelegate;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ScheduleViewModel_Factory implements Factory<ScheduleViewModel> {
  private final Provider<LoadFilteredUserSessionsUseCase> loadFilteredUserSessionsUseCaseProvider;

  private final Provider<LoadEventFiltersUseCase> loadEventFiltersUseCaseProvider;

  private final Provider<SignInViewModelDelegate> signInViewModelDelegateProvider;

  private final Provider<StarEventAndNotifyUseCase> starEventUseCaseProvider;

  private final Provider<ScheduleUiHintsShownUseCase> scheduleUiHintsShownUseCaseProvider;

  private final Provider<TopicSubscriber> topicSubscriberProvider;

  private final Provider<SnackbarMessageManager> snackbarMessageManagerProvider;

  private final Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider;

  private final Provider<RefreshConferenceDataUseCase> refreshConferenceDataUseCaseProvider;

  private final Provider<ObserveConferenceDataUseCase> observeConferenceDataUseCaseProvider;

  private final Provider<LoadSelectedFiltersUseCase> loadSelectedFiltersUseCaseProvider;

  private final Provider<SaveSelectedFiltersUseCase> saveSelectedFiltersUseCaseProvider;

  private final Provider<AnalyticsHelper> analyticsHelperProvider;

  public ScheduleViewModel_Factory(
      Provider<LoadFilteredUserSessionsUseCase> loadFilteredUserSessionsUseCaseProvider,
      Provider<LoadEventFiltersUseCase> loadEventFiltersUseCaseProvider,
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<StarEventAndNotifyUseCase> starEventUseCaseProvider,
      Provider<ScheduleUiHintsShownUseCase> scheduleUiHintsShownUseCaseProvider,
      Provider<TopicSubscriber> topicSubscriberProvider,
      Provider<SnackbarMessageManager> snackbarMessageManagerProvider,
      Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider,
      Provider<RefreshConferenceDataUseCase> refreshConferenceDataUseCaseProvider,
      Provider<ObserveConferenceDataUseCase> observeConferenceDataUseCaseProvider,
      Provider<LoadSelectedFiltersUseCase> loadSelectedFiltersUseCaseProvider,
      Provider<SaveSelectedFiltersUseCase> saveSelectedFiltersUseCaseProvider,
      Provider<AnalyticsHelper> analyticsHelperProvider) {
    this.loadFilteredUserSessionsUseCaseProvider = loadFilteredUserSessionsUseCaseProvider;
    this.loadEventFiltersUseCaseProvider = loadEventFiltersUseCaseProvider;
    this.signInViewModelDelegateProvider = signInViewModelDelegateProvider;
    this.starEventUseCaseProvider = starEventUseCaseProvider;
    this.scheduleUiHintsShownUseCaseProvider = scheduleUiHintsShownUseCaseProvider;
    this.topicSubscriberProvider = topicSubscriberProvider;
    this.snackbarMessageManagerProvider = snackbarMessageManagerProvider;
    this.getTimeZoneUseCaseProvider = getTimeZoneUseCaseProvider;
    this.refreshConferenceDataUseCaseProvider = refreshConferenceDataUseCaseProvider;
    this.observeConferenceDataUseCaseProvider = observeConferenceDataUseCaseProvider;
    this.loadSelectedFiltersUseCaseProvider = loadSelectedFiltersUseCaseProvider;
    this.saveSelectedFiltersUseCaseProvider = saveSelectedFiltersUseCaseProvider;
    this.analyticsHelperProvider = analyticsHelperProvider;
  }

  @Override
  public ScheduleViewModel get() {
    return new ScheduleViewModel(loadFilteredUserSessionsUseCaseProvider.get(), loadEventFiltersUseCaseProvider.get(), signInViewModelDelegateProvider.get(), starEventUseCaseProvider.get(), scheduleUiHintsShownUseCaseProvider.get(), topicSubscriberProvider.get(), snackbarMessageManagerProvider.get(), getTimeZoneUseCaseProvider.get(), refreshConferenceDataUseCaseProvider.get(), observeConferenceDataUseCaseProvider.get(), loadSelectedFiltersUseCaseProvider.get(), saveSelectedFiltersUseCaseProvider.get(), analyticsHelperProvider.get());
  }

  public static ScheduleViewModel_Factory create(
      Provider<LoadFilteredUserSessionsUseCase> loadFilteredUserSessionsUseCaseProvider,
      Provider<LoadEventFiltersUseCase> loadEventFiltersUseCaseProvider,
      Provider<SignInViewModelDelegate> signInViewModelDelegateProvider,
      Provider<StarEventAndNotifyUseCase> starEventUseCaseProvider,
      Provider<ScheduleUiHintsShownUseCase> scheduleUiHintsShownUseCaseProvider,
      Provider<TopicSubscriber> topicSubscriberProvider,
      Provider<SnackbarMessageManager> snackbarMessageManagerProvider,
      Provider<GetTimeZoneUseCase> getTimeZoneUseCaseProvider,
      Provider<RefreshConferenceDataUseCase> refreshConferenceDataUseCaseProvider,
      Provider<ObserveConferenceDataUseCase> observeConferenceDataUseCaseProvider,
      Provider<LoadSelectedFiltersUseCase> loadSelectedFiltersUseCaseProvider,
      Provider<SaveSelectedFiltersUseCase> saveSelectedFiltersUseCaseProvider,
      Provider<AnalyticsHelper> analyticsHelperProvider) {
    return new ScheduleViewModel_Factory(loadFilteredUserSessionsUseCaseProvider, loadEventFiltersUseCaseProvider, signInViewModelDelegateProvider, starEventUseCaseProvider, scheduleUiHintsShownUseCaseProvider, topicSubscriberProvider, snackbarMessageManagerProvider, getTimeZoneUseCaseProvider, refreshConferenceDataUseCaseProvider, observeConferenceDataUseCaseProvider, loadSelectedFiltersUseCaseProvider, saveSelectedFiltersUseCaseProvider, analyticsHelperProvider);
  }

  public static ScheduleViewModel newInstance(
      LoadFilteredUserSessionsUseCase loadFilteredUserSessionsUseCase,
      LoadEventFiltersUseCase loadEventFiltersUseCase,
      SignInViewModelDelegate signInViewModelDelegate, StarEventAndNotifyUseCase starEventUseCase,
      ScheduleUiHintsShownUseCase scheduleUiHintsShownUseCase, TopicSubscriber topicSubscriber,
      SnackbarMessageManager snackbarMessageManager, GetTimeZoneUseCase getTimeZoneUseCase,
      RefreshConferenceDataUseCase refreshConferenceDataUseCase,
      ObserveConferenceDataUseCase observeConferenceDataUseCase,
      LoadSelectedFiltersUseCase loadSelectedFiltersUseCase,
      SaveSelectedFiltersUseCase saveSelectedFiltersUseCase, AnalyticsHelper analyticsHelper) {
    return new ScheduleViewModel(loadFilteredUserSessionsUseCase, loadEventFiltersUseCase, signInViewModelDelegate, starEventUseCase, scheduleUiHintsShownUseCase, topicSubscriber, snackbarMessageManager, getTimeZoneUseCase, refreshConferenceDataUseCase, observeConferenceDataUseCase, loadSelectedFiltersUseCase, saveSelectedFiltersUseCase, analyticsHelper);
  }
}
